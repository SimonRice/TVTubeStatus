//
// Prediction.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** DTO to capture the prediction details */
open class Prediction: JSONEncodable {

    /** The identitier for the prediction */
    public var id: String?
    /** The type of the operation (1: is new or has been updated, 2: should be deleted from any client cache) */
    public var operationType: Int32?
    /** The actual vehicle in transit (for train modes, the leading car of the rolling set) */
    public var vehicleId: String?
    /** Identifier for the prediction */
    public var naptanId: String?
    /** Station name */
    public var stationName: String?
    /** Unique identifier for the Line */
    public var lineId: String?
    /** Line Name */
    public var lineName: String?
    /** Platform name (for bus, this is the stop letter) */
    public var platformName: String?
    /** Direction (unified to inbound/outbound) */
    public var direction: String?
    /** Bearing (between 0 to 359) */
    public var bearing: String?
    /** Naptan Identifier for the prediction&#39;s destination */
    public var destinationNaptanId: String?
    /** Name of the destination */
    public var destinationName: String?
    /** Timestamp for when the prediction was inserted/modified (source column drives what objects are broadcast on each iteration) */
    public var timestamp: Date?
    /** Prediction of the Time to station in seconds */
    public var timeToStation: Int32?
    /** The current location of the vehicle. */
    public var currentLocation: String?
    /** Routing information or other descriptive text about the path of the vehicle towards the destination */
    public var towards: String?
    /** The expected arrival time of the vehicle at the stop/station */
    public var expectedArrival: Date?
    /** The expiry time for the prediction */
    public var timeToLive: Date?
    /** The mode name of the station/line the prediction relates to */
    public var modeName: String?
    /** Keep the original timestamp from MongoDb fo debugging purposes */
    public var timing: PredictionTiming?

    public init() {}

    // MARK: JSONEncodable
    open func encodeToJSON() -> Any {
        var nillableDictionary = [String:Any?]()
        nillableDictionary["id"] = self.id
        nillableDictionary["operationType"] = self.operationType?.encodeToJSON()
        nillableDictionary["vehicleId"] = self.vehicleId
        nillableDictionary["naptanId"] = self.naptanId
        nillableDictionary["stationName"] = self.stationName
        nillableDictionary["lineId"] = self.lineId
        nillableDictionary["lineName"] = self.lineName
        nillableDictionary["platformName"] = self.platformName
        nillableDictionary["direction"] = self.direction
        nillableDictionary["bearing"] = self.bearing
        nillableDictionary["destinationNaptanId"] = self.destinationNaptanId
        nillableDictionary["destinationName"] = self.destinationName
        nillableDictionary["timestamp"] = self.timestamp?.encodeToJSON()
        nillableDictionary["timeToStation"] = self.timeToStation?.encodeToJSON()
        nillableDictionary["currentLocation"] = self.currentLocation
        nillableDictionary["towards"] = self.towards
        nillableDictionary["expectedArrival"] = self.expectedArrival?.encodeToJSON()
        nillableDictionary["timeToLive"] = self.timeToLive?.encodeToJSON()
        nillableDictionary["modeName"] = self.modeName
        nillableDictionary["timing"] = self.timing?.encodeToJSON()

        let dictionary: [String:Any] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
