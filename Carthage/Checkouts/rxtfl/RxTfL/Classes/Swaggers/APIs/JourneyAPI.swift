//
// JourneyAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import RxSwift



open class JourneyAPI: APIBase {
    /**
     * enum for parameter timeIs
     */
    public enum TimeIs_journeyJourneyResults: String { 
        case arriving = "Arriving"
        case departing = "Departing"
    }

    /**
     * enum for parameter journeyPreference
     */
    public enum JourneyPreference_journeyJourneyResults: String { 
        case leastInterchange = "LeastInterchange"
        case leastTime = "LeastTime"
        case leastWalking = "LeastWalking"
    }

    /**
     * enum for parameter accessibilityPreference
     */
    public enum AccessibilityPreference_journeyJourneyResults: String { 
        case noRequirements = "NoRequirements"
        case noSolidStairs = "NoSolidStairs"
        case noEscalators = "NoEscalators"
        case noElevators = "NoElevators"
        case stepFreeToVehicle = "StepFreeToVehicle"
        case stepFreeToPlatform = "StepFreeToPlatform"
    }

    /**
     * enum for parameter walkingSpeed
     */
    public enum WalkingSpeed_journeyJourneyResults: String { 
        case slow = "Slow"
        case average = "Average"
        case fast = "Fast"
    }

    /**
     * enum for parameter cyclePreference
     */
    public enum CyclePreference_journeyJourneyResults: String { 
        case _none = "None"
        case leaveAtStation = "LeaveAtStation"
        case takeOnTransport = "TakeOnTransport"
        case allTheWay = "AllTheWay"
        case cycleHire = "CycleHire"
    }

    /**
     * enum for parameter bikeProficiency
     */
    public enum BikeProficiency_journeyJourneyResults: String { 
        case easy = "Easy"
        case moderate = "Moderate"
        case fast = "Fast"
    }

    /**
     Perform a Journey Planner search from the parameters specified in simple types
     
     - parameter from: (path) Origin of the journey. Can be WGS84 coordinates expressed as \&quot;lat,long\&quot;, a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name). 
     - parameter to: (path) Destination of the journey. Can be WGS84 coordinates expressed as \&quot;lat,long\&quot;, a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name). 
     - parameter via: (query) Travel through point on the journey. Can be WGS84 coordinates expressed as \&quot;lat,long\&quot;, a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name). (optional)
     - parameter nationalSearch: (query) Does the journey cover stops outside London? eg. \&quot;nationalSearch&#x3D;true\&quot; (optional)
     - parameter date: (query) The date must be in yyyyMMdd format (optional)
     - parameter time: (query) The time must be in HHmm format (optional)
     - parameter timeIs: (query) Does the time given relate to arrival or leaving time? Possible options: \&quot;departing\&quot; | \&quot;arriving\&quot; (optional)
     - parameter journeyPreference: (query) The journey preference eg possible options: \&quot;leastinterchange\&quot; | \&quot;leasttime\&quot; | \&quot;leastwalking\&quot; (optional)
     - parameter mode: (query) The mode must be a comma separated list of modes. eg possible options: \&quot;public-bus,overground,train,tube,coach,dlr,cablecar,tram,river,walking,cycle\&quot; (optional)
     - parameter accessibilityPreference: (query) The accessibility preference must be a comma separated list eg. \&quot;noSolidStairs,noEscalators,noElevators,stepFreeToVehicle,stepFreeToPlatform\&quot; (optional)
     - parameter fromName: (query) An optional name to associate with the origin of the journey in the results. (optional)
     - parameter toName: (query) An optional name to associate with the destination of the journey in the results. (optional)
     - parameter viaName: (query) An optional name to associate with the via point of the journey in the results. (optional)
     - parameter maxTransferMinutes: (query) The max walking time in minutes for transfer eg. \&quot;120\&quot; (optional)
     - parameter maxWalkingMinutes: (query) The max walking time in minutes for journeys eg. \&quot;120\&quot; (optional)
     - parameter walkingSpeed: (query) The walking speed. eg possible options: \&quot;slow\&quot; | \&quot;average\&quot; | \&quot;fast\&quot;. (optional)
     - parameter cyclePreference: (query) The cycle preference. eg possible options: \&quot;allTheWay\&quot; | \&quot;leaveAtStation\&quot; | \&quot;takeOnTransport\&quot; | \&quot;cycleHire\&quot; (optional)
     - parameter adjustment: (query) Time adjustment command. eg possible options: \&quot;TripFirst\&quot; | \&quot;TripLast\&quot; (optional)
     - parameter bikeProficiency: (query) A comma separated list of cycling proficiency levels. eg possible options: \&quot;easy,moderate,fast\&quot; (optional)
     - parameter alternativeCycle: (query) Option to determine whether to return alternative cycling journey (optional)
     - parameter alternativeWalking: (query) Option to determine whether to return alternative walking journey (optional)
     - parameter applyHtmlMarkup: (query) Flag to determine whether certain text (e.g. walking instructions) should be output with HTML tags or not. (optional)
     - parameter useMultiModalCall: (query) A boolean to indicate whether or not to return 3 public transport journeys, a bus journey, a cycle hire journey, a personal cycle journey and a walking journey (optional)
     - parameter walkingOptimization: (query) A boolean to indicate whether to optimize journeys using walking (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func journeyJourneyResults(from: String, to: String, via: String? = nil, nationalSearch: Bool? = nil, date: String? = nil, time: String? = nil, timeIs: TimeIs_journeyJourneyResults? = nil, journeyPreference: JourneyPreference_journeyJourneyResults? = nil, mode: [String]? = nil, accessibilityPreference: [String]? = nil, fromName: String? = nil, toName: String? = nil, viaName: String? = nil, maxTransferMinutes: String? = nil, maxWalkingMinutes: String? = nil, walkingSpeed: WalkingSpeed_journeyJourneyResults? = nil, cyclePreference: CyclePreference_journeyJourneyResults? = nil, adjustment: String? = nil, bikeProficiency: [String]? = nil, alternativeCycle: Bool? = nil, alternativeWalking: Bool? = nil, applyHtmlMarkup: Bool? = nil, useMultiModalCall: Bool? = nil, walkingOptimization: Bool? = nil, completion: @escaping ((_ data: ItineraryResult?,_ error: Error?) -> Void)) {
        journeyJourneyResultsWithRequestBuilder(from: from, to: to, via: via, nationalSearch: nationalSearch, date: date, time: time, timeIs: timeIs, journeyPreference: journeyPreference, mode: mode, accessibilityPreference: accessibilityPreference, fromName: fromName, toName: toName, viaName: viaName, maxTransferMinutes: maxTransferMinutes, maxWalkingMinutes: maxWalkingMinutes, walkingSpeed: walkingSpeed, cyclePreference: cyclePreference, adjustment: adjustment, bikeProficiency: bikeProficiency, alternativeCycle: alternativeCycle, alternativeWalking: alternativeWalking, applyHtmlMarkup: applyHtmlMarkup, useMultiModalCall: useMultiModalCall, walkingOptimization: walkingOptimization).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Perform a Journey Planner search from the parameters specified in simple types
     
     - parameter from: (path) Origin of the journey. Can be WGS84 coordinates expressed as \&quot;lat,long\&quot;, a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name). 
     - parameter to: (path) Destination of the journey. Can be WGS84 coordinates expressed as \&quot;lat,long\&quot;, a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name). 
     - parameter via: (query) Travel through point on the journey. Can be WGS84 coordinates expressed as \&quot;lat,long\&quot;, a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name). (optional)
     - parameter nationalSearch: (query) Does the journey cover stops outside London? eg. \&quot;nationalSearch&#x3D;true\&quot; (optional)
     - parameter date: (query) The date must be in yyyyMMdd format (optional)
     - parameter time: (query) The time must be in HHmm format (optional)
     - parameter timeIs: (query) Does the time given relate to arrival or leaving time? Possible options: \&quot;departing\&quot; | \&quot;arriving\&quot; (optional)
     - parameter journeyPreference: (query) The journey preference eg possible options: \&quot;leastinterchange\&quot; | \&quot;leasttime\&quot; | \&quot;leastwalking\&quot; (optional)
     - parameter mode: (query) The mode must be a comma separated list of modes. eg possible options: \&quot;public-bus,overground,train,tube,coach,dlr,cablecar,tram,river,walking,cycle\&quot; (optional)
     - parameter accessibilityPreference: (query) The accessibility preference must be a comma separated list eg. \&quot;noSolidStairs,noEscalators,noElevators,stepFreeToVehicle,stepFreeToPlatform\&quot; (optional)
     - parameter fromName: (query) An optional name to associate with the origin of the journey in the results. (optional)
     - parameter toName: (query) An optional name to associate with the destination of the journey in the results. (optional)
     - parameter viaName: (query) An optional name to associate with the via point of the journey in the results. (optional)
     - parameter maxTransferMinutes: (query) The max walking time in minutes for transfer eg. \&quot;120\&quot; (optional)
     - parameter maxWalkingMinutes: (query) The max walking time in minutes for journeys eg. \&quot;120\&quot; (optional)
     - parameter walkingSpeed: (query) The walking speed. eg possible options: \&quot;slow\&quot; | \&quot;average\&quot; | \&quot;fast\&quot;. (optional)
     - parameter cyclePreference: (query) The cycle preference. eg possible options: \&quot;allTheWay\&quot; | \&quot;leaveAtStation\&quot; | \&quot;takeOnTransport\&quot; | \&quot;cycleHire\&quot; (optional)
     - parameter adjustment: (query) Time adjustment command. eg possible options: \&quot;TripFirst\&quot; | \&quot;TripLast\&quot; (optional)
     - parameter bikeProficiency: (query) A comma separated list of cycling proficiency levels. eg possible options: \&quot;easy,moderate,fast\&quot; (optional)
     - parameter alternativeCycle: (query) Option to determine whether to return alternative cycling journey (optional)
     - parameter alternativeWalking: (query) Option to determine whether to return alternative walking journey (optional)
     - parameter applyHtmlMarkup: (query) Flag to determine whether certain text (e.g. walking instructions) should be output with HTML tags or not. (optional)
     - parameter useMultiModalCall: (query) A boolean to indicate whether or not to return 3 public transport journeys, a bus journey, a cycle hire journey, a personal cycle journey and a walking journey (optional)
     - parameter walkingOptimization: (query) A boolean to indicate whether to optimize journeys using walking (optional)
     - returns: Observable<ItineraryResult>
     */
    open class func journeyJourneyResults(from: String, to: String, via: String? = nil, nationalSearch: Bool? = nil, date: String? = nil, time: String? = nil, timeIs: TimeIs_journeyJourneyResults? = nil, journeyPreference: JourneyPreference_journeyJourneyResults? = nil, mode: [String]? = nil, accessibilityPreference: [String]? = nil, fromName: String? = nil, toName: String? = nil, viaName: String? = nil, maxTransferMinutes: String? = nil, maxWalkingMinutes: String? = nil, walkingSpeed: WalkingSpeed_journeyJourneyResults? = nil, cyclePreference: CyclePreference_journeyJourneyResults? = nil, adjustment: String? = nil, bikeProficiency: [String]? = nil, alternativeCycle: Bool? = nil, alternativeWalking: Bool? = nil, applyHtmlMarkup: Bool? = nil, useMultiModalCall: Bool? = nil, walkingOptimization: Bool? = nil) -> Observable<ItineraryResult> {
        return Observable.create { observer -> Disposable in
            journeyJourneyResults(from: from, to: to, via: via, nationalSearch: nationalSearch, date: date, time: time, timeIs: timeIs, journeyPreference: journeyPreference, mode: mode, accessibilityPreference: accessibilityPreference, fromName: fromName, toName: toName, viaName: viaName, maxTransferMinutes: maxTransferMinutes, maxWalkingMinutes: maxWalkingMinutes, walkingSpeed: walkingSpeed, cyclePreference: cyclePreference, adjustment: adjustment, bikeProficiency: bikeProficiency, alternativeCycle: alternativeCycle, alternativeWalking: alternativeWalking, applyHtmlMarkup: applyHtmlMarkup, useMultiModalCall: useMultiModalCall, walkingOptimization: walkingOptimization) { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Perform a Journey Planner search from the parameters specified in simple types
     - GET /Journey/JourneyResults/{from}/to/{to}
     - examples: [{contentType=application/json, example={
  "journeys" : [ {
    "duration" : 123,
    "startDateTime" : "2000-01-23T04:56:07.000+00:00",
    "legs" : [ {
      "departureTime" : "2000-01-23T04:56:07.000+00:00",
      "disruptions" : [ {
        "closureText" : "aeiou",
        "affectedRoutes" : [ {
          "routeCode" : "aeiou",
          "originationName" : "aeiou",
          "destinationName" : "aeiou",
          "routeSectionNaptanEntrySequence" : [ {
            "stopPoint" : {
              "indicator" : "aeiou",
              "commonName" : "aeiou",
              "modes" : [ "aeiou" ],
              "distance" : 1.3579000000000001069366817318950779736042022705078125,
              "smsCode" : "aeiou",
              "lon" : 1.3579000000000001069366817318950779736042022705078125,
              "children" : [ {
                "commonName" : "aeiou",
                "placeType" : "aeiou",
                "distance" : 1.3579000000000001069366817318950779736042022705078125,
                "children" : [ "" ],
                "childrenUrls" : [ "aeiou" ],
                "lon" : 1.3579000000000001069366817318950779736042022705078125,
                "id" : "aeiou",
                "additionalProperties" : [ "" ],
                "url" : "aeiou",
                "lat" : 1.3579000000000001069366817318950779736042022705078125
              } ],
              "hubNaptanCode" : "aeiou",
              "stopLetter" : "aeiou",
              "id" : "aeiou",
              "platformName" : "aeiou",
              "lines" : [ "" ],
              "lat" : 1.3579000000000001069366817318950779736042022705078125,
              "lineModeGroups" : [ {
                "modeName" : "aeiou",
                "lineIdentifier" : [ "aeiou" ]
              } ],
              "childrenUrls" : [ "aeiou" ],
              "stationNaptan" : "aeiou",
              "fullName" : "aeiou",
              "stopType" : "aeiou",
              "naptanMode" : "aeiou",
              "url" : "aeiou",
              "placeType" : "aeiou",
              "naptanId" : "aeiou",
              "icsCode" : "aeiou",
              "lineGroup" : [ {
                "naptanIdReference" : "aeiou",
                "lineIdentifier" : [ "aeiou" ],
                "stationAtcoCode" : "aeiou"
              } ],
              "additionalProperties" : [ {
                "sourceSystemKey" : "aeiou",
                "modified" : "2000-01-23T04:56:07.000+00:00",
                "category" : "aeiou",
                "value" : "aeiou",
                "key" : "aeiou"
              } ],
              "accessibilitySummary" : "aeiou",
              "status" : true
            },
            "ordinal" : 123
          } ],
          "name" : "aeiou",
          "lineId" : "aeiou",
          "id" : "aeiou",
          "lineString" : "aeiou",
          "direction" : "aeiou"
        } ],
        "isBlocking" : true,
        "created" : "2000-01-23T04:56:07.000+00:00",
        "lastUpdate" : "2000-01-23T04:56:07.000+00:00",
        "additionalInfo" : "aeiou",
        "isWholeLine" : true,
        "description" : "aeiou",
        "affectedStops" : [ "" ],
        "category" : "aeiou",
        "type" : "aeiou",
        "categoryDescription" : "aeiou"
      } ],
      "distance" : 1.3579000000000001069366817318950779736042022705078125,
      "isDisrupted" : true,
      "hasFixedLocations" : true,
      "obstacles" : [ {
        "stopId" : 123,
        "incline" : "aeiou",
        "position" : "aeiou",
        "type" : "aeiou"
      } ],
      "arrivalPoint" : "",
      "speed" : "aeiou",
      "duration" : 123,
      "mode" : "",
      "path" : {
        "elevation" : [ {
          "startLat" : 1.3579000000000001069366817318950779736042022705078125,
          "endLat" : 1.3579000000000001069366817318950779736042022705078125,
          "distance" : 123,
          "startLon" : 1.3579000000000001069366817318950779736042022705078125,
          "endLon" : 1.3579000000000001069366817318950779736042022705078125,
          "gradient" : 1.3579000000000001069366817318950779736042022705078125,
          "heightFromPreviousPoint" : 123
        } ],
        "stopPoints" : [ {
          "crowding" : {
            "trainLoadings" : [ {
              "naptanTo" : "aeiou",
              "line" : "aeiou",
              "timeSlice" : "aeiou",
              "platformDirection" : "aeiou",
              "value" : 123,
              "lineDirection" : "aeiou",
              "direction" : "aeiou"
            } ],
            "passengerFlows" : [ {
              "timeSlice" : "aeiou",
              "value" : 123
            } ]
          },
          "name" : "aeiou",
          "fullName" : "aeiou",
          "id" : "aeiou",
          "type" : "aeiou",
          "uri" : "aeiou"
        } ],
        "lineString" : "aeiou"
      },
      "departurePoint" : {
        "lon" : 1.3579000000000001069366817318950779736042022705078125,
        "lat" : 1.3579000000000001069366817318950779736042022705078125
      },
      "instruction" : {
        "summary" : "aeiou",
        "detailed" : "aeiou",
        "steps" : [ {
          "distance" : 123,
          "pathAttribute" : {
            "name" : "aeiou",
            "value" : "aeiou"
          },
          "turnDirection" : "aeiou",
          "trackType" : "aeiou",
          "latitude" : 1.3579000000000001069366817318950779736042022705078125,
          "description" : "aeiou",
          "cumulativeTravelTime" : 123,
          "descriptionHeading" : "aeiou",
          "cumulativeDistance" : 123,
          "streetName" : "aeiou",
          "skyDirection" : 123,
          "skyDirectionDescription" : "aeiou",
          "longitude" : 1.3579000000000001069366817318950779736042022705078125
        } ]
      },
      "arrivalTime" : "2000-01-23T04:56:07.000+00:00",
      "plannedWorks" : [ {
        "lastUpdateDateTime" : "2000-01-23T04:56:07.000+00:00",
        "description" : "aeiou",
        "createdDateTime" : "2000-01-23T04:56:07.000+00:00",
        "id" : "aeiou"
      } ],
      "routeOptions" : [ {
        "directions" : [ "aeiou" ],
        "lineIdentifier" : "",
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    } ],
    "arrivalDateTime" : "2000-01-23T04:56:07.000+00:00"
  } ],
  "cycleHireDockingStationData" : {
    "originNumberOfBikes" : 123,
    "originNumberOfEmptySlots" : 123,
    "destinationNumberOfBikes" : 123,
    "originId" : "aeiou",
    "destinationNumberOfEmptySlots" : 123,
    "destinationId" : "aeiou"
  },
  "journeyVector" : {
    "from" : "aeiou",
    "to" : "aeiou",
    "uri" : "aeiou",
    "via" : "aeiou"
  },
  "recommendedMaxAgeMinutes" : 123,
  "searchCriteria" : {
    "dateTime" : "2000-01-23T04:56:07.000+00:00",
    "timeAdjustments" : {
      "later" : "",
      "earlier" : "",
      "earliest" : {
        "date" : "aeiou",
        "time" : "aeiou",
        "timeIs" : "aeiou",
        "uri" : "aeiou"
      },
      "latest" : ""
    },
    "dateTimeType" : "aeiou"
  },
  "stopMessages" : [ "aeiou" ],
  "lines" : [ {
    "routeSections" : [ {
      "routeCode" : "aeiou",
      "serviceType" : "aeiou",
      "originationName" : "aeiou",
      "destinationName" : "aeiou",
      "name" : "aeiou",
      "destination" : "aeiou",
      "originator" : "aeiou",
      "direction" : "aeiou"
    } ],
    "modeName" : "aeiou",
    "disruptions" : [ "" ],
    "lineStatuses" : [ {
      "statusSeverityDescription" : "aeiou",
      "reason" : "aeiou",
      "disruption" : "",
      "created" : "2000-01-23T04:56:07.000+00:00",
      "statusSeverity" : 123,
      "lineId" : "aeiou",
      "modified" : "2000-01-23T04:56:07.000+00:00",
      "validityPeriods" : [ {
        "fromDate" : "2000-01-23T04:56:07.000+00:00",
        "isNow" : true,
        "toDate" : "2000-01-23T04:56:07.000+00:00"
      } ],
      "id" : 123
    } ],
    "crowding" : "",
    "created" : "2000-01-23T04:56:07.000+00:00",
    "name" : "aeiou",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "serviceTypes" : [ {
      "name" : "aeiou",
      "uri" : "aeiou"
    } ],
    "id" : "aeiou"
  } ]
}}, {contentType=application/xml, example=<null>
  <stopMessages>aeiou</stopMessages>
  <recommendedMaxAgeMinutes>123</recommendedMaxAgeMinutes>
</null>}]
     - examples: [{contentType=application/json, example={
  "journeys" : [ {
    "duration" : 123,
    "startDateTime" : "2000-01-23T04:56:07.000+00:00",
    "legs" : [ {
      "departureTime" : "2000-01-23T04:56:07.000+00:00",
      "disruptions" : [ {
        "closureText" : "aeiou",
        "affectedRoutes" : [ {
          "routeCode" : "aeiou",
          "originationName" : "aeiou",
          "destinationName" : "aeiou",
          "routeSectionNaptanEntrySequence" : [ {
            "stopPoint" : {
              "indicator" : "aeiou",
              "commonName" : "aeiou",
              "modes" : [ "aeiou" ],
              "distance" : 1.3579000000000001069366817318950779736042022705078125,
              "smsCode" : "aeiou",
              "lon" : 1.3579000000000001069366817318950779736042022705078125,
              "children" : [ {
                "commonName" : "aeiou",
                "placeType" : "aeiou",
                "distance" : 1.3579000000000001069366817318950779736042022705078125,
                "children" : [ "" ],
                "childrenUrls" : [ "aeiou" ],
                "lon" : 1.3579000000000001069366817318950779736042022705078125,
                "id" : "aeiou",
                "additionalProperties" : [ "" ],
                "url" : "aeiou",
                "lat" : 1.3579000000000001069366817318950779736042022705078125
              } ],
              "hubNaptanCode" : "aeiou",
              "stopLetter" : "aeiou",
              "id" : "aeiou",
              "platformName" : "aeiou",
              "lines" : [ "" ],
              "lat" : 1.3579000000000001069366817318950779736042022705078125,
              "lineModeGroups" : [ {
                "modeName" : "aeiou",
                "lineIdentifier" : [ "aeiou" ]
              } ],
              "childrenUrls" : [ "aeiou" ],
              "stationNaptan" : "aeiou",
              "fullName" : "aeiou",
              "stopType" : "aeiou",
              "naptanMode" : "aeiou",
              "url" : "aeiou",
              "placeType" : "aeiou",
              "naptanId" : "aeiou",
              "icsCode" : "aeiou",
              "lineGroup" : [ {
                "naptanIdReference" : "aeiou",
                "lineIdentifier" : [ "aeiou" ],
                "stationAtcoCode" : "aeiou"
              } ],
              "additionalProperties" : [ {
                "sourceSystemKey" : "aeiou",
                "modified" : "2000-01-23T04:56:07.000+00:00",
                "category" : "aeiou",
                "value" : "aeiou",
                "key" : "aeiou"
              } ],
              "accessibilitySummary" : "aeiou",
              "status" : true
            },
            "ordinal" : 123
          } ],
          "name" : "aeiou",
          "lineId" : "aeiou",
          "id" : "aeiou",
          "lineString" : "aeiou",
          "direction" : "aeiou"
        } ],
        "isBlocking" : true,
        "created" : "2000-01-23T04:56:07.000+00:00",
        "lastUpdate" : "2000-01-23T04:56:07.000+00:00",
        "additionalInfo" : "aeiou",
        "isWholeLine" : true,
        "description" : "aeiou",
        "affectedStops" : [ "" ],
        "category" : "aeiou",
        "type" : "aeiou",
        "categoryDescription" : "aeiou"
      } ],
      "distance" : 1.3579000000000001069366817318950779736042022705078125,
      "isDisrupted" : true,
      "hasFixedLocations" : true,
      "obstacles" : [ {
        "stopId" : 123,
        "incline" : "aeiou",
        "position" : "aeiou",
        "type" : "aeiou"
      } ],
      "arrivalPoint" : "",
      "speed" : "aeiou",
      "duration" : 123,
      "mode" : "",
      "path" : {
        "elevation" : [ {
          "startLat" : 1.3579000000000001069366817318950779736042022705078125,
          "endLat" : 1.3579000000000001069366817318950779736042022705078125,
          "distance" : 123,
          "startLon" : 1.3579000000000001069366817318950779736042022705078125,
          "endLon" : 1.3579000000000001069366817318950779736042022705078125,
          "gradient" : 1.3579000000000001069366817318950779736042022705078125,
          "heightFromPreviousPoint" : 123
        } ],
        "stopPoints" : [ {
          "crowding" : {
            "trainLoadings" : [ {
              "naptanTo" : "aeiou",
              "line" : "aeiou",
              "timeSlice" : "aeiou",
              "platformDirection" : "aeiou",
              "value" : 123,
              "lineDirection" : "aeiou",
              "direction" : "aeiou"
            } ],
            "passengerFlows" : [ {
              "timeSlice" : "aeiou",
              "value" : 123
            } ]
          },
          "name" : "aeiou",
          "fullName" : "aeiou",
          "id" : "aeiou",
          "type" : "aeiou",
          "uri" : "aeiou"
        } ],
        "lineString" : "aeiou"
      },
      "departurePoint" : {
        "lon" : 1.3579000000000001069366817318950779736042022705078125,
        "lat" : 1.3579000000000001069366817318950779736042022705078125
      },
      "instruction" : {
        "summary" : "aeiou",
        "detailed" : "aeiou",
        "steps" : [ {
          "distance" : 123,
          "pathAttribute" : {
            "name" : "aeiou",
            "value" : "aeiou"
          },
          "turnDirection" : "aeiou",
          "trackType" : "aeiou",
          "latitude" : 1.3579000000000001069366817318950779736042022705078125,
          "description" : "aeiou",
          "cumulativeTravelTime" : 123,
          "descriptionHeading" : "aeiou",
          "cumulativeDistance" : 123,
          "streetName" : "aeiou",
          "skyDirection" : 123,
          "skyDirectionDescription" : "aeiou",
          "longitude" : 1.3579000000000001069366817318950779736042022705078125
        } ]
      },
      "arrivalTime" : "2000-01-23T04:56:07.000+00:00",
      "plannedWorks" : [ {
        "lastUpdateDateTime" : "2000-01-23T04:56:07.000+00:00",
        "description" : "aeiou",
        "createdDateTime" : "2000-01-23T04:56:07.000+00:00",
        "id" : "aeiou"
      } ],
      "routeOptions" : [ {
        "directions" : [ "aeiou" ],
        "lineIdentifier" : "",
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    } ],
    "arrivalDateTime" : "2000-01-23T04:56:07.000+00:00"
  } ],
  "cycleHireDockingStationData" : {
    "originNumberOfBikes" : 123,
    "originNumberOfEmptySlots" : 123,
    "destinationNumberOfBikes" : 123,
    "originId" : "aeiou",
    "destinationNumberOfEmptySlots" : 123,
    "destinationId" : "aeiou"
  },
  "journeyVector" : {
    "from" : "aeiou",
    "to" : "aeiou",
    "uri" : "aeiou",
    "via" : "aeiou"
  },
  "recommendedMaxAgeMinutes" : 123,
  "searchCriteria" : {
    "dateTime" : "2000-01-23T04:56:07.000+00:00",
    "timeAdjustments" : {
      "later" : "",
      "earlier" : "",
      "earliest" : {
        "date" : "aeiou",
        "time" : "aeiou",
        "timeIs" : "aeiou",
        "uri" : "aeiou"
      },
      "latest" : ""
    },
    "dateTimeType" : "aeiou"
  },
  "stopMessages" : [ "aeiou" ],
  "lines" : [ {
    "routeSections" : [ {
      "routeCode" : "aeiou",
      "serviceType" : "aeiou",
      "originationName" : "aeiou",
      "destinationName" : "aeiou",
      "name" : "aeiou",
      "destination" : "aeiou",
      "originator" : "aeiou",
      "direction" : "aeiou"
    } ],
    "modeName" : "aeiou",
    "disruptions" : [ "" ],
    "lineStatuses" : [ {
      "statusSeverityDescription" : "aeiou",
      "reason" : "aeiou",
      "disruption" : "",
      "created" : "2000-01-23T04:56:07.000+00:00",
      "statusSeverity" : 123,
      "lineId" : "aeiou",
      "modified" : "2000-01-23T04:56:07.000+00:00",
      "validityPeriods" : [ {
        "fromDate" : "2000-01-23T04:56:07.000+00:00",
        "isNow" : true,
        "toDate" : "2000-01-23T04:56:07.000+00:00"
      } ],
      "id" : 123
    } ],
    "crowding" : "",
    "created" : "2000-01-23T04:56:07.000+00:00",
    "name" : "aeiou",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "serviceTypes" : [ {
      "name" : "aeiou",
      "uri" : "aeiou"
    } ],
    "id" : "aeiou"
  } ]
}}, {contentType=application/xml, example=<null>
  <stopMessages>aeiou</stopMessages>
  <recommendedMaxAgeMinutes>123</recommendedMaxAgeMinutes>
</null>}]
     
     - parameter from: (path) Origin of the journey. Can be WGS84 coordinates expressed as \&quot;lat,long\&quot;, a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name). 
     - parameter to: (path) Destination of the journey. Can be WGS84 coordinates expressed as \&quot;lat,long\&quot;, a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name). 
     - parameter via: (query) Travel through point on the journey. Can be WGS84 coordinates expressed as \&quot;lat,long\&quot;, a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name). (optional)
     - parameter nationalSearch: (query) Does the journey cover stops outside London? eg. \&quot;nationalSearch&#x3D;true\&quot; (optional)
     - parameter date: (query) The date must be in yyyyMMdd format (optional)
     - parameter time: (query) The time must be in HHmm format (optional)
     - parameter timeIs: (query) Does the time given relate to arrival or leaving time? Possible options: \&quot;departing\&quot; | \&quot;arriving\&quot; (optional)
     - parameter journeyPreference: (query) The journey preference eg possible options: \&quot;leastinterchange\&quot; | \&quot;leasttime\&quot; | \&quot;leastwalking\&quot; (optional)
     - parameter mode: (query) The mode must be a comma separated list of modes. eg possible options: \&quot;public-bus,overground,train,tube,coach,dlr,cablecar,tram,river,walking,cycle\&quot; (optional)
     - parameter accessibilityPreference: (query) The accessibility preference must be a comma separated list eg. \&quot;noSolidStairs,noEscalators,noElevators,stepFreeToVehicle,stepFreeToPlatform\&quot; (optional)
     - parameter fromName: (query) An optional name to associate with the origin of the journey in the results. (optional)
     - parameter toName: (query) An optional name to associate with the destination of the journey in the results. (optional)
     - parameter viaName: (query) An optional name to associate with the via point of the journey in the results. (optional)
     - parameter maxTransferMinutes: (query) The max walking time in minutes for transfer eg. \&quot;120\&quot; (optional)
     - parameter maxWalkingMinutes: (query) The max walking time in minutes for journeys eg. \&quot;120\&quot; (optional)
     - parameter walkingSpeed: (query) The walking speed. eg possible options: \&quot;slow\&quot; | \&quot;average\&quot; | \&quot;fast\&quot;. (optional)
     - parameter cyclePreference: (query) The cycle preference. eg possible options: \&quot;allTheWay\&quot; | \&quot;leaveAtStation\&quot; | \&quot;takeOnTransport\&quot; | \&quot;cycleHire\&quot; (optional)
     - parameter adjustment: (query) Time adjustment command. eg possible options: \&quot;TripFirst\&quot; | \&quot;TripLast\&quot; (optional)
     - parameter bikeProficiency: (query) A comma separated list of cycling proficiency levels. eg possible options: \&quot;easy,moderate,fast\&quot; (optional)
     - parameter alternativeCycle: (query) Option to determine whether to return alternative cycling journey (optional)
     - parameter alternativeWalking: (query) Option to determine whether to return alternative walking journey (optional)
     - parameter applyHtmlMarkup: (query) Flag to determine whether certain text (e.g. walking instructions) should be output with HTML tags or not. (optional)
     - parameter useMultiModalCall: (query) A boolean to indicate whether or not to return 3 public transport journeys, a bus journey, a cycle hire journey, a personal cycle journey and a walking journey (optional)
     - parameter walkingOptimization: (query) A boolean to indicate whether to optimize journeys using walking (optional)

     - returns: RequestBuilder<ItineraryResult> 
     */
    open class func journeyJourneyResultsWithRequestBuilder(from: String, to: String, via: String? = nil, nationalSearch: Bool? = nil, date: String? = nil, time: String? = nil, timeIs: TimeIs_journeyJourneyResults? = nil, journeyPreference: JourneyPreference_journeyJourneyResults? = nil, mode: [String]? = nil, accessibilityPreference: [String]? = nil, fromName: String? = nil, toName: String? = nil, viaName: String? = nil, maxTransferMinutes: String? = nil, maxWalkingMinutes: String? = nil, walkingSpeed: WalkingSpeed_journeyJourneyResults? = nil, cyclePreference: CyclePreference_journeyJourneyResults? = nil, adjustment: String? = nil, bikeProficiency: [String]? = nil, alternativeCycle: Bool? = nil, alternativeWalking: Bool? = nil, applyHtmlMarkup: Bool? = nil, useMultiModalCall: Bool? = nil, walkingOptimization: Bool? = nil) -> RequestBuilder<ItineraryResult> {
        var path = "/Journey/JourneyResults/{from}/to/{to}"
        path = path.replacingOccurrences(of: "{from}", with: from.asParameter, options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{to}", with: to.asParameter, options: .literal, range: nil)
        let URLString = RxTfLAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "via": via, 
            "nationalSearch": nationalSearch, 
            "date": date, 
            "time": time, 
            "timeIs": timeIs?.rawValue, 
            "journeyPreference": journeyPreference?.rawValue, 
            "mode": mode, 
            "accessibilityPreference": accessibilityPreference, 
            "fromName": fromName, 
            "toName": toName, 
            "viaName": viaName, 
            "maxTransferMinutes": maxTransferMinutes, 
            "maxWalkingMinutes": maxWalkingMinutes, 
            "walkingSpeed": walkingSpeed?.rawValue, 
            "cyclePreference": cyclePreference?.rawValue, 
            "adjustment": adjustment, 
            "bikeProficiency": bikeProficiency, 
            "alternativeCycle": alternativeCycle, 
            "alternativeWalking": alternativeWalking, 
            "applyHtmlMarkup": applyHtmlMarkup, 
            "useMultiModalCall": useMultiModalCall, 
            "walkingOptimization": walkingOptimization
        ])
        

        let requestBuilder: RequestBuilder<ItineraryResult>.Type = RxTfLAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Gets a list of all of the available journey planner modes
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func journeyMeta(completion: @escaping ((_ data: [Mode]?,_ error: Error?) -> Void)) {
        journeyMetaWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Gets a list of all of the available journey planner modes
     
     - returns: Observable<[Mode]>
     */
    open class func journeyMeta() -> Observable<[Mode]> {
        return Observable.create { observer -> Disposable in
            journeyMeta() { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Gets a list of all of the available journey planner modes
     - GET /Journey/Meta/Modes
     - examples: [{contentType=application/json, example=[ {
  "modeName" : "aeiou",
  "isTflService" : true,
  "isFarePaying" : true,
  "isScheduledService" : true
} ]}, {contentType=application/xml, example=<null>
  <isTflService>true</isTflService>
  <isFarePaying>true</isFarePaying>
  <isScheduledService>true</isScheduledService>
  <modeName>aeiou</modeName>
</null>}]
     - examples: [{contentType=application/json, example=[ {
  "modeName" : "aeiou",
  "isTflService" : true,
  "isFarePaying" : true,
  "isScheduledService" : true
} ]}, {contentType=application/xml, example=<null>
  <isTflService>true</isTflService>
  <isFarePaying>true</isFarePaying>
  <isScheduledService>true</isScheduledService>
  <modeName>aeiou</modeName>
</null>}]

     - returns: RequestBuilder<[Mode]> 
     */
    open class func journeyMetaWithRequestBuilder() -> RequestBuilder<[Mode]> {
        let path = "/Journey/Meta/Modes"
        let URLString = RxTfLAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[Mode]>.Type = RxTfLAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
