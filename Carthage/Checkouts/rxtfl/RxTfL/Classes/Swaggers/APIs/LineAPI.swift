//
// LineAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import RxSwift



open class LineAPI: APIBase {
    /**
     Get the list of arrival predictions for given line ids based at the given stop
     
     - parameter stopPointId: (query) Id of stop to get arrival predictions for (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) 
     - parameter ids: (path) A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func lineArrivals(stopPointId: String, ids: [String], completion: @escaping ((_ data: [Prediction]?,_ error: Error?) -> Void)) {
        lineArrivalsWithRequestBuilder(stopPointId: stopPointId, ids: ids).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get the list of arrival predictions for given line ids based at the given stop
     
     - parameter stopPointId: (query) Id of stop to get arrival predictions for (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) 
     - parameter ids: (path) A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. 
     - returns: Observable<[Prediction]>
     */
    open class func lineArrivals(stopPointId: String, ids: [String]) -> Observable<[Prediction]> {
        return Observable.create { observer -> Disposable in
            lineArrivals(stopPointId: stopPointId, ids: ids) { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get the list of arrival predictions for given line ids based at the given stop
     - GET /Line/{ids}/Arrivals
     - examples: [{contentType=application/json, example=[ {
  "modeName" : "aeiou",
  "bearing" : "aeiou",
  "timing" : {
    "read" : "2000-01-23T04:56:07.000+00:00",
    "insert" : "2000-01-23T04:56:07.000+00:00",
    "received" : "2000-01-23T04:56:07.000+00:00",
    "source" : "2000-01-23T04:56:07.000+00:00",
    "countdownServerAdjustment" : "aeiou",
    "sent" : "2000-01-23T04:56:07.000+00:00"
  },
  "lineId" : "aeiou",
  "lineName" : "aeiou",
  "destinationNaptanId" : "aeiou",
  "towards" : "aeiou",
  "currentLocation" : "aeiou",
  "timeToLive" : "2000-01-23T04:56:07.000+00:00",
  "expectedArrival" : "2000-01-23T04:56:07.000+00:00",
  "naptanId" : "aeiou",
  "destinationName" : "aeiou",
  "operationType" : 123,
  "stationName" : "aeiou",
  "id" : "aeiou",
  "vehicleId" : "aeiou",
  "platformName" : "aeiou",
  "timeToStation" : 123,
  "direction" : "aeiou",
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
} ]}, {contentType=application/xml, example=<null>
  <id>aeiou</id>
  <operationType>123</operationType>
  <vehicleId>aeiou</vehicleId>
  <naptanId>aeiou</naptanId>
  <stationName>aeiou</stationName>
  <lineId>aeiou</lineId>
  <lineName>aeiou</lineName>
  <platformName>aeiou</platformName>
  <direction>aeiou</direction>
  <bearing>aeiou</bearing>
  <destinationNaptanId>aeiou</destinationNaptanId>
  <destinationName>aeiou</destinationName>
  <timestamp>2000-01-23T04:56:07.000Z</timestamp>
  <timeToStation>123</timeToStation>
  <currentLocation>aeiou</currentLocation>
  <towards>aeiou</towards>
  <expectedArrival>2000-01-23T04:56:07.000Z</expectedArrival>
  <timeToLive>2000-01-23T04:56:07.000Z</timeToLive>
  <modeName>aeiou</modeName>
</null>}]
     - examples: [{contentType=application/json, example=[ {
  "modeName" : "aeiou",
  "bearing" : "aeiou",
  "timing" : {
    "read" : "2000-01-23T04:56:07.000+00:00",
    "insert" : "2000-01-23T04:56:07.000+00:00",
    "received" : "2000-01-23T04:56:07.000+00:00",
    "source" : "2000-01-23T04:56:07.000+00:00",
    "countdownServerAdjustment" : "aeiou",
    "sent" : "2000-01-23T04:56:07.000+00:00"
  },
  "lineId" : "aeiou",
  "lineName" : "aeiou",
  "destinationNaptanId" : "aeiou",
  "towards" : "aeiou",
  "currentLocation" : "aeiou",
  "timeToLive" : "2000-01-23T04:56:07.000+00:00",
  "expectedArrival" : "2000-01-23T04:56:07.000+00:00",
  "naptanId" : "aeiou",
  "destinationName" : "aeiou",
  "operationType" : 123,
  "stationName" : "aeiou",
  "id" : "aeiou",
  "vehicleId" : "aeiou",
  "platformName" : "aeiou",
  "timeToStation" : 123,
  "direction" : "aeiou",
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
} ]}, {contentType=application/xml, example=<null>
  <id>aeiou</id>
  <operationType>123</operationType>
  <vehicleId>aeiou</vehicleId>
  <naptanId>aeiou</naptanId>
  <stationName>aeiou</stationName>
  <lineId>aeiou</lineId>
  <lineName>aeiou</lineName>
  <platformName>aeiou</platformName>
  <direction>aeiou</direction>
  <bearing>aeiou</bearing>
  <destinationNaptanId>aeiou</destinationNaptanId>
  <destinationName>aeiou</destinationName>
  <timestamp>2000-01-23T04:56:07.000Z</timestamp>
  <timeToStation>123</timeToStation>
  <currentLocation>aeiou</currentLocation>
  <towards>aeiou</towards>
  <expectedArrival>2000-01-23T04:56:07.000Z</expectedArrival>
  <timeToLive>2000-01-23T04:56:07.000Z</timeToLive>
  <modeName>aeiou</modeName>
</null>}]
     
     - parameter stopPointId: (query) Id of stop to get arrival predictions for (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) 
     - parameter ids: (path) A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. 

     - returns: RequestBuilder<[Prediction]> 
     */
    open class func lineArrivalsWithRequestBuilder(stopPointId: String, ids: [String]) -> RequestBuilder<[Prediction]> {
        var path = "/Line/{ids}/Arrivals"
        path = path.replacingOccurrences(of: "{ids}", with: ids.asParameter, options: .literal, range: nil)
        let URLString = RxTfLAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "stopPointId": stopPointId
        ])
        

        let requestBuilder: RequestBuilder<[Prediction]>.Type = RxTfLAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter direction
     */
    public enum Direction_lineArrivals_0: String { 
        case inbound = "inbound"
        case outbound = "outbound"
        case all = "all"
    }

    /**
     Get the list of arrival predictions for given line ids based at the given stop going in the procided direction
     
     - parameter stopPointId: (path) Id of stop to get arrival predictions for (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) 
     - parameter ids: (path) A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. 
     - parameter direction: (query) The direction of travel. Can be inbound or outbound 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func lineArrivals_0(stopPointId: String, ids: [String], direction: Direction_lineArrivals_0, completion: @escaping ((_ data: [Prediction]?,_ error: Error?) -> Void)) {
        lineArrivals_0WithRequestBuilder(stopPointId: stopPointId, ids: ids, direction: direction).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get the list of arrival predictions for given line ids based at the given stop going in the procided direction
     
     - parameter stopPointId: (path) Id of stop to get arrival predictions for (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) 
     - parameter ids: (path) A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. 
     - parameter direction: (query) The direction of travel. Can be inbound or outbound 
     - returns: Observable<[Prediction]>
     */
    open class func lineArrivals_0(stopPointId: String, ids: [String], direction: Direction_lineArrivals_0) -> Observable<[Prediction]> {
        return Observable.create { observer -> Disposable in
            lineArrivals_0(stopPointId: stopPointId, ids: ids, direction: direction) { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get the list of arrival predictions for given line ids based at the given stop going in the procided direction
     - GET /Line/{ids}/Arrivals/{stopPointId}
     - examples: [{contentType=application/json, example=[ {
  "modeName" : "aeiou",
  "bearing" : "aeiou",
  "timing" : {
    "read" : "2000-01-23T04:56:07.000+00:00",
    "insert" : "2000-01-23T04:56:07.000+00:00",
    "received" : "2000-01-23T04:56:07.000+00:00",
    "source" : "2000-01-23T04:56:07.000+00:00",
    "countdownServerAdjustment" : "aeiou",
    "sent" : "2000-01-23T04:56:07.000+00:00"
  },
  "lineId" : "aeiou",
  "lineName" : "aeiou",
  "destinationNaptanId" : "aeiou",
  "towards" : "aeiou",
  "currentLocation" : "aeiou",
  "timeToLive" : "2000-01-23T04:56:07.000+00:00",
  "expectedArrival" : "2000-01-23T04:56:07.000+00:00",
  "naptanId" : "aeiou",
  "destinationName" : "aeiou",
  "operationType" : 123,
  "stationName" : "aeiou",
  "id" : "aeiou",
  "vehicleId" : "aeiou",
  "platformName" : "aeiou",
  "timeToStation" : 123,
  "direction" : "aeiou",
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
} ]}, {contentType=application/xml, example=<null>
  <id>aeiou</id>
  <operationType>123</operationType>
  <vehicleId>aeiou</vehicleId>
  <naptanId>aeiou</naptanId>
  <stationName>aeiou</stationName>
  <lineId>aeiou</lineId>
  <lineName>aeiou</lineName>
  <platformName>aeiou</platformName>
  <direction>aeiou</direction>
  <bearing>aeiou</bearing>
  <destinationNaptanId>aeiou</destinationNaptanId>
  <destinationName>aeiou</destinationName>
  <timestamp>2000-01-23T04:56:07.000Z</timestamp>
  <timeToStation>123</timeToStation>
  <currentLocation>aeiou</currentLocation>
  <towards>aeiou</towards>
  <expectedArrival>2000-01-23T04:56:07.000Z</expectedArrival>
  <timeToLive>2000-01-23T04:56:07.000Z</timeToLive>
  <modeName>aeiou</modeName>
</null>}]
     - examples: [{contentType=application/json, example=[ {
  "modeName" : "aeiou",
  "bearing" : "aeiou",
  "timing" : {
    "read" : "2000-01-23T04:56:07.000+00:00",
    "insert" : "2000-01-23T04:56:07.000+00:00",
    "received" : "2000-01-23T04:56:07.000+00:00",
    "source" : "2000-01-23T04:56:07.000+00:00",
    "countdownServerAdjustment" : "aeiou",
    "sent" : "2000-01-23T04:56:07.000+00:00"
  },
  "lineId" : "aeiou",
  "lineName" : "aeiou",
  "destinationNaptanId" : "aeiou",
  "towards" : "aeiou",
  "currentLocation" : "aeiou",
  "timeToLive" : "2000-01-23T04:56:07.000+00:00",
  "expectedArrival" : "2000-01-23T04:56:07.000+00:00",
  "naptanId" : "aeiou",
  "destinationName" : "aeiou",
  "operationType" : 123,
  "stationName" : "aeiou",
  "id" : "aeiou",
  "vehicleId" : "aeiou",
  "platformName" : "aeiou",
  "timeToStation" : 123,
  "direction" : "aeiou",
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
} ]}, {contentType=application/xml, example=<null>
  <id>aeiou</id>
  <operationType>123</operationType>
  <vehicleId>aeiou</vehicleId>
  <naptanId>aeiou</naptanId>
  <stationName>aeiou</stationName>
  <lineId>aeiou</lineId>
  <lineName>aeiou</lineName>
  <platformName>aeiou</platformName>
  <direction>aeiou</direction>
  <bearing>aeiou</bearing>
  <destinationNaptanId>aeiou</destinationNaptanId>
  <destinationName>aeiou</destinationName>
  <timestamp>2000-01-23T04:56:07.000Z</timestamp>
  <timeToStation>123</timeToStation>
  <currentLocation>aeiou</currentLocation>
  <towards>aeiou</towards>
  <expectedArrival>2000-01-23T04:56:07.000Z</expectedArrival>
  <timeToLive>2000-01-23T04:56:07.000Z</timeToLive>
  <modeName>aeiou</modeName>
</null>}]
     
     - parameter stopPointId: (path) Id of stop to get arrival predictions for (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) 
     - parameter ids: (path) A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. 
     - parameter direction: (query) The direction of travel. Can be inbound or outbound 

     - returns: RequestBuilder<[Prediction]> 
     */
    open class func lineArrivals_0WithRequestBuilder(stopPointId: String, ids: [String], direction: Direction_lineArrivals_0) -> RequestBuilder<[Prediction]> {
        var path = "/Line/{ids}/Arrivals/{stopPointId}"
        path = path.replacingOccurrences(of: "{stopPointId}", with: stopPointId.asParameter, options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{ids}", with: ids.asParameter, options: .literal, range: nil)
        let URLString = RxTfLAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "direction": direction.rawValue
        ])
        

        let requestBuilder: RequestBuilder<[Prediction]>.Type = RxTfLAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get disruptions for the given line ids
     
     - parameter ids: (path) A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func lineDisruption(ids: [String], completion: @escaping ((_ data: [Disruption]?,_ error: Error?) -> Void)) {
        lineDisruptionWithRequestBuilder(ids: ids).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get disruptions for the given line ids
     
     - parameter ids: (path) A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. 
     - returns: Observable<[Disruption]>
     */
    open class func lineDisruption(ids: [String]) -> Observable<[Disruption]> {
        return Observable.create { observer -> Disposable in
            lineDisruption(ids: ids) { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get disruptions for the given line ids
     - GET /Line/{ids}/Disruption
     - examples: [{contentType=application/json, example=[ {
  "closureText" : "aeiou",
  "affectedRoutes" : [ {
    "routeCode" : "aeiou",
    "originationName" : "aeiou",
    "destinationName" : "aeiou",
    "routeSectionNaptanEntrySequence" : [ {
      "stopPoint" : {
        "indicator" : "aeiou",
        "commonName" : "aeiou",
        "modes" : [ "aeiou" ],
        "distance" : 1.3579000000000001069366817318950779736042022705078125,
        "smsCode" : "aeiou",
        "lon" : 1.3579000000000001069366817318950779736042022705078125,
        "children" : [ {
          "commonName" : "aeiou",
          "placeType" : "aeiou",
          "distance" : 1.3579000000000001069366817318950779736042022705078125,
          "children" : [ "" ],
          "childrenUrls" : [ "aeiou" ],
          "lon" : 1.3579000000000001069366817318950779736042022705078125,
          "id" : "aeiou",
          "additionalProperties" : [ "" ],
          "url" : "aeiou",
          "lat" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "hubNaptanCode" : "aeiou",
        "stopLetter" : "aeiou",
        "id" : "aeiou",
        "platformName" : "aeiou",
        "lines" : [ {
          "crowding" : {
            "trainLoadings" : [ {
              "naptanTo" : "aeiou",
              "line" : "aeiou",
              "timeSlice" : "aeiou",
              "platformDirection" : "aeiou",
              "value" : 123,
              "lineDirection" : "aeiou",
              "direction" : "aeiou"
            } ],
            "passengerFlows" : [ {
              "timeSlice" : "aeiou",
              "value" : 123
            } ]
          },
          "name" : "aeiou",
          "fullName" : "aeiou",
          "id" : "aeiou",
          "type" : "aeiou",
          "uri" : "aeiou"
        } ],
        "lat" : 1.3579000000000001069366817318950779736042022705078125,
        "lineModeGroups" : [ {
          "modeName" : "aeiou",
          "lineIdentifier" : [ "aeiou" ]
        } ],
        "childrenUrls" : [ "aeiou" ],
        "stationNaptan" : "aeiou",
        "fullName" : "aeiou",
        "stopType" : "aeiou",
        "naptanMode" : "aeiou",
        "url" : "aeiou",
        "placeType" : "aeiou",
        "naptanId" : "aeiou",
        "icsCode" : "aeiou",
        "lineGroup" : [ {
          "naptanIdReference" : "aeiou",
          "lineIdentifier" : [ "aeiou" ],
          "stationAtcoCode" : "aeiou"
        } ],
        "additionalProperties" : [ {
          "sourceSystemKey" : "aeiou",
          "modified" : "2000-01-23T04:56:07.000+00:00",
          "category" : "aeiou",
          "value" : "aeiou",
          "key" : "aeiou"
        } ],
        "accessibilitySummary" : "aeiou",
        "status" : true
      },
      "ordinal" : 123
    } ],
    "name" : "aeiou",
    "lineId" : "aeiou",
    "id" : "aeiou",
    "lineString" : "aeiou",
    "direction" : "aeiou"
  } ],
  "isBlocking" : true,
  "created" : "2000-01-23T04:56:07.000+00:00",
  "lastUpdate" : "2000-01-23T04:56:07.000+00:00",
  "additionalInfo" : "aeiou",
  "isWholeLine" : true,
  "description" : "aeiou",
  "affectedStops" : [ "" ],
  "category" : "aeiou",
  "type" : "aeiou",
  "categoryDescription" : "aeiou"
} ]}, {contentType=application/xml, example=<null>
  <category>aeiou</category>
  <type>aeiou</type>
  <categoryDescription>aeiou</categoryDescription>
  <description>aeiou</description>
  <additionalInfo>aeiou</additionalInfo>
  <created>2000-01-23T04:56:07.000Z</created>
  <lastUpdate>2000-01-23T04:56:07.000Z</lastUpdate>
  <isBlocking>true</isBlocking>
  <isWholeLine>true</isWholeLine>
  <closureText>aeiou</closureText>
</null>}]
     - examples: [{contentType=application/json, example=[ {
  "closureText" : "aeiou",
  "affectedRoutes" : [ {
    "routeCode" : "aeiou",
    "originationName" : "aeiou",
    "destinationName" : "aeiou",
    "routeSectionNaptanEntrySequence" : [ {
      "stopPoint" : {
        "indicator" : "aeiou",
        "commonName" : "aeiou",
        "modes" : [ "aeiou" ],
        "distance" : 1.3579000000000001069366817318950779736042022705078125,
        "smsCode" : "aeiou",
        "lon" : 1.3579000000000001069366817318950779736042022705078125,
        "children" : [ {
          "commonName" : "aeiou",
          "placeType" : "aeiou",
          "distance" : 1.3579000000000001069366817318950779736042022705078125,
          "children" : [ "" ],
          "childrenUrls" : [ "aeiou" ],
          "lon" : 1.3579000000000001069366817318950779736042022705078125,
          "id" : "aeiou",
          "additionalProperties" : [ "" ],
          "url" : "aeiou",
          "lat" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "hubNaptanCode" : "aeiou",
        "stopLetter" : "aeiou",
        "id" : "aeiou",
        "platformName" : "aeiou",
        "lines" : [ {
          "crowding" : {
            "trainLoadings" : [ {
              "naptanTo" : "aeiou",
              "line" : "aeiou",
              "timeSlice" : "aeiou",
              "platformDirection" : "aeiou",
              "value" : 123,
              "lineDirection" : "aeiou",
              "direction" : "aeiou"
            } ],
            "passengerFlows" : [ {
              "timeSlice" : "aeiou",
              "value" : 123
            } ]
          },
          "name" : "aeiou",
          "fullName" : "aeiou",
          "id" : "aeiou",
          "type" : "aeiou",
          "uri" : "aeiou"
        } ],
        "lat" : 1.3579000000000001069366817318950779736042022705078125,
        "lineModeGroups" : [ {
          "modeName" : "aeiou",
          "lineIdentifier" : [ "aeiou" ]
        } ],
        "childrenUrls" : [ "aeiou" ],
        "stationNaptan" : "aeiou",
        "fullName" : "aeiou",
        "stopType" : "aeiou",
        "naptanMode" : "aeiou",
        "url" : "aeiou",
        "placeType" : "aeiou",
        "naptanId" : "aeiou",
        "icsCode" : "aeiou",
        "lineGroup" : [ {
          "naptanIdReference" : "aeiou",
          "lineIdentifier" : [ "aeiou" ],
          "stationAtcoCode" : "aeiou"
        } ],
        "additionalProperties" : [ {
          "sourceSystemKey" : "aeiou",
          "modified" : "2000-01-23T04:56:07.000+00:00",
          "category" : "aeiou",
          "value" : "aeiou",
          "key" : "aeiou"
        } ],
        "accessibilitySummary" : "aeiou",
        "status" : true
      },
      "ordinal" : 123
    } ],
    "name" : "aeiou",
    "lineId" : "aeiou",
    "id" : "aeiou",
    "lineString" : "aeiou",
    "direction" : "aeiou"
  } ],
  "isBlocking" : true,
  "created" : "2000-01-23T04:56:07.000+00:00",
  "lastUpdate" : "2000-01-23T04:56:07.000+00:00",
  "additionalInfo" : "aeiou",
  "isWholeLine" : true,
  "description" : "aeiou",
  "affectedStops" : [ "" ],
  "category" : "aeiou",
  "type" : "aeiou",
  "categoryDescription" : "aeiou"
} ]}, {contentType=application/xml, example=<null>
  <category>aeiou</category>
  <type>aeiou</type>
  <categoryDescription>aeiou</categoryDescription>
  <description>aeiou</description>
  <additionalInfo>aeiou</additionalInfo>
  <created>2000-01-23T04:56:07.000Z</created>
  <lastUpdate>2000-01-23T04:56:07.000Z</lastUpdate>
  <isBlocking>true</isBlocking>
  <isWholeLine>true</isWholeLine>
  <closureText>aeiou</closureText>
</null>}]
     
     - parameter ids: (path) A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. 

     - returns: RequestBuilder<[Disruption]> 
     */
    open class func lineDisruptionWithRequestBuilder(ids: [String]) -> RequestBuilder<[Disruption]> {
        var path = "/Line/{ids}/Disruption"
        path = path.replacingOccurrences(of: "{ids}", with: ids.asParameter, options: .literal, range: nil)
        let URLString = RxTfLAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[Disruption]>.Type = RxTfLAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get disruptions for all lines of the given modes.
     
     - parameter modes: (path) A comma-separated list of modes e.g. tube,dlr 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func lineDisruptionByMode(modes: [String], completion: @escaping ((_ data: [Disruption]?,_ error: Error?) -> Void)) {
        lineDisruptionByModeWithRequestBuilder(modes: modes).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get disruptions for all lines of the given modes.
     
     - parameter modes: (path) A comma-separated list of modes e.g. tube,dlr 
     - returns: Observable<[Disruption]>
     */
    open class func lineDisruptionByMode(modes: [String]) -> Observable<[Disruption]> {
        return Observable.create { observer -> Disposable in
            lineDisruptionByMode(modes: modes) { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get disruptions for all lines of the given modes.
     - GET /Line/Mode/{modes}/Disruption
     - examples: [{contentType=application/json, example=[ {
  "closureText" : "aeiou",
  "affectedRoutes" : [ {
    "routeCode" : "aeiou",
    "originationName" : "aeiou",
    "destinationName" : "aeiou",
    "routeSectionNaptanEntrySequence" : [ {
      "stopPoint" : {
        "indicator" : "aeiou",
        "commonName" : "aeiou",
        "modes" : [ "aeiou" ],
        "distance" : 1.3579000000000001069366817318950779736042022705078125,
        "smsCode" : "aeiou",
        "lon" : 1.3579000000000001069366817318950779736042022705078125,
        "children" : [ {
          "commonName" : "aeiou",
          "placeType" : "aeiou",
          "distance" : 1.3579000000000001069366817318950779736042022705078125,
          "children" : [ "" ],
          "childrenUrls" : [ "aeiou" ],
          "lon" : 1.3579000000000001069366817318950779736042022705078125,
          "id" : "aeiou",
          "additionalProperties" : [ "" ],
          "url" : "aeiou",
          "lat" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "hubNaptanCode" : "aeiou",
        "stopLetter" : "aeiou",
        "id" : "aeiou",
        "platformName" : "aeiou",
        "lines" : [ {
          "crowding" : {
            "trainLoadings" : [ {
              "naptanTo" : "aeiou",
              "line" : "aeiou",
              "timeSlice" : "aeiou",
              "platformDirection" : "aeiou",
              "value" : 123,
              "lineDirection" : "aeiou",
              "direction" : "aeiou"
            } ],
            "passengerFlows" : [ {
              "timeSlice" : "aeiou",
              "value" : 123
            } ]
          },
          "name" : "aeiou",
          "fullName" : "aeiou",
          "id" : "aeiou",
          "type" : "aeiou",
          "uri" : "aeiou"
        } ],
        "lat" : 1.3579000000000001069366817318950779736042022705078125,
        "lineModeGroups" : [ {
          "modeName" : "aeiou",
          "lineIdentifier" : [ "aeiou" ]
        } ],
        "childrenUrls" : [ "aeiou" ],
        "stationNaptan" : "aeiou",
        "fullName" : "aeiou",
        "stopType" : "aeiou",
        "naptanMode" : "aeiou",
        "url" : "aeiou",
        "placeType" : "aeiou",
        "naptanId" : "aeiou",
        "icsCode" : "aeiou",
        "lineGroup" : [ {
          "naptanIdReference" : "aeiou",
          "lineIdentifier" : [ "aeiou" ],
          "stationAtcoCode" : "aeiou"
        } ],
        "additionalProperties" : [ {
          "sourceSystemKey" : "aeiou",
          "modified" : "2000-01-23T04:56:07.000+00:00",
          "category" : "aeiou",
          "value" : "aeiou",
          "key" : "aeiou"
        } ],
        "accessibilitySummary" : "aeiou",
        "status" : true
      },
      "ordinal" : 123
    } ],
    "name" : "aeiou",
    "lineId" : "aeiou",
    "id" : "aeiou",
    "lineString" : "aeiou",
    "direction" : "aeiou"
  } ],
  "isBlocking" : true,
  "created" : "2000-01-23T04:56:07.000+00:00",
  "lastUpdate" : "2000-01-23T04:56:07.000+00:00",
  "additionalInfo" : "aeiou",
  "isWholeLine" : true,
  "description" : "aeiou",
  "affectedStops" : [ "" ],
  "category" : "aeiou",
  "type" : "aeiou",
  "categoryDescription" : "aeiou"
} ]}, {contentType=application/xml, example=<null>
  <category>aeiou</category>
  <type>aeiou</type>
  <categoryDescription>aeiou</categoryDescription>
  <description>aeiou</description>
  <additionalInfo>aeiou</additionalInfo>
  <created>2000-01-23T04:56:07.000Z</created>
  <lastUpdate>2000-01-23T04:56:07.000Z</lastUpdate>
  <isBlocking>true</isBlocking>
  <isWholeLine>true</isWholeLine>
  <closureText>aeiou</closureText>
</null>}]
     - examples: [{contentType=application/json, example=[ {
  "closureText" : "aeiou",
  "affectedRoutes" : [ {
    "routeCode" : "aeiou",
    "originationName" : "aeiou",
    "destinationName" : "aeiou",
    "routeSectionNaptanEntrySequence" : [ {
      "stopPoint" : {
        "indicator" : "aeiou",
        "commonName" : "aeiou",
        "modes" : [ "aeiou" ],
        "distance" : 1.3579000000000001069366817318950779736042022705078125,
        "smsCode" : "aeiou",
        "lon" : 1.3579000000000001069366817318950779736042022705078125,
        "children" : [ {
          "commonName" : "aeiou",
          "placeType" : "aeiou",
          "distance" : 1.3579000000000001069366817318950779736042022705078125,
          "children" : [ "" ],
          "childrenUrls" : [ "aeiou" ],
          "lon" : 1.3579000000000001069366817318950779736042022705078125,
          "id" : "aeiou",
          "additionalProperties" : [ "" ],
          "url" : "aeiou",
          "lat" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "hubNaptanCode" : "aeiou",
        "stopLetter" : "aeiou",
        "id" : "aeiou",
        "platformName" : "aeiou",
        "lines" : [ {
          "crowding" : {
            "trainLoadings" : [ {
              "naptanTo" : "aeiou",
              "line" : "aeiou",
              "timeSlice" : "aeiou",
              "platformDirection" : "aeiou",
              "value" : 123,
              "lineDirection" : "aeiou",
              "direction" : "aeiou"
            } ],
            "passengerFlows" : [ {
              "timeSlice" : "aeiou",
              "value" : 123
            } ]
          },
          "name" : "aeiou",
          "fullName" : "aeiou",
          "id" : "aeiou",
          "type" : "aeiou",
          "uri" : "aeiou"
        } ],
        "lat" : 1.3579000000000001069366817318950779736042022705078125,
        "lineModeGroups" : [ {
          "modeName" : "aeiou",
          "lineIdentifier" : [ "aeiou" ]
        } ],
        "childrenUrls" : [ "aeiou" ],
        "stationNaptan" : "aeiou",
        "fullName" : "aeiou",
        "stopType" : "aeiou",
        "naptanMode" : "aeiou",
        "url" : "aeiou",
        "placeType" : "aeiou",
        "naptanId" : "aeiou",
        "icsCode" : "aeiou",
        "lineGroup" : [ {
          "naptanIdReference" : "aeiou",
          "lineIdentifier" : [ "aeiou" ],
          "stationAtcoCode" : "aeiou"
        } ],
        "additionalProperties" : [ {
          "sourceSystemKey" : "aeiou",
          "modified" : "2000-01-23T04:56:07.000+00:00",
          "category" : "aeiou",
          "value" : "aeiou",
          "key" : "aeiou"
        } ],
        "accessibilitySummary" : "aeiou",
        "status" : true
      },
      "ordinal" : 123
    } ],
    "name" : "aeiou",
    "lineId" : "aeiou",
    "id" : "aeiou",
    "lineString" : "aeiou",
    "direction" : "aeiou"
  } ],
  "isBlocking" : true,
  "created" : "2000-01-23T04:56:07.000+00:00",
  "lastUpdate" : "2000-01-23T04:56:07.000+00:00",
  "additionalInfo" : "aeiou",
  "isWholeLine" : true,
  "description" : "aeiou",
  "affectedStops" : [ "" ],
  "category" : "aeiou",
  "type" : "aeiou",
  "categoryDescription" : "aeiou"
} ]}, {contentType=application/xml, example=<null>
  <category>aeiou</category>
  <type>aeiou</type>
  <categoryDescription>aeiou</categoryDescription>
  <description>aeiou</description>
  <additionalInfo>aeiou</additionalInfo>
  <created>2000-01-23T04:56:07.000Z</created>
  <lastUpdate>2000-01-23T04:56:07.000Z</lastUpdate>
  <isBlocking>true</isBlocking>
  <isWholeLine>true</isWholeLine>
  <closureText>aeiou</closureText>
</null>}]
     
     - parameter modes: (path) A comma-separated list of modes e.g. tube,dlr 

     - returns: RequestBuilder<[Disruption]> 
     */
    open class func lineDisruptionByModeWithRequestBuilder(modes: [String]) -> RequestBuilder<[Disruption]> {
        var path = "/Line/Mode/{modes}/Disruption"
        path = path.replacingOccurrences(of: "{modes}", with: modes.asParameter, options: .literal, range: nil)
        let URLString = RxTfLAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[Disruption]>.Type = RxTfLAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Gets lines that match the specified line ids.
     
     - parameter ids: (path) A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func lineGet(ids: [String], completion: @escaping ((_ data: [Line]?,_ error: Error?) -> Void)) {
        lineGetWithRequestBuilder(ids: ids).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Gets lines that match the specified line ids.
     
     - parameter ids: (path) A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. 
     - returns: Observable<[Line]>
     */
    open class func lineGet(ids: [String]) -> Observable<[Line]> {
        return Observable.create { observer -> Disposable in
            lineGet(ids: ids) { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Gets lines that match the specified line ids.
     - GET /Line/{ids}
     - examples: [{contentType=application/json, example=[ {
  "routeSections" : [ {
    "routeCode" : "aeiou",
    "serviceType" : "aeiou",
    "originationName" : "aeiou",
    "destinationName" : "aeiou",
    "name" : "aeiou",
    "destination" : "aeiou",
    "originator" : "aeiou",
    "direction" : "aeiou"
  } ],
  "modeName" : "aeiou",
  "disruptions" : [ {
    "closureText" : "aeiou",
    "affectedRoutes" : [ {
      "routeCode" : "aeiou",
      "originationName" : "aeiou",
      "destinationName" : "aeiou",
      "routeSectionNaptanEntrySequence" : [ {
        "stopPoint" : {
          "indicator" : "aeiou",
          "commonName" : "aeiou",
          "modes" : [ "aeiou" ],
          "distance" : 1.3579000000000001069366817318950779736042022705078125,
          "smsCode" : "aeiou",
          "lon" : 1.3579000000000001069366817318950779736042022705078125,
          "children" : [ {
            "commonName" : "aeiou",
            "placeType" : "aeiou",
            "distance" : 1.3579000000000001069366817318950779736042022705078125,
            "children" : [ "" ],
            "childrenUrls" : [ "aeiou" ],
            "lon" : 1.3579000000000001069366817318950779736042022705078125,
            "id" : "aeiou",
            "additionalProperties" : [ "" ],
            "url" : "aeiou",
            "lat" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "hubNaptanCode" : "aeiou",
          "stopLetter" : "aeiou",
          "id" : "aeiou",
          "platformName" : "aeiou",
          "lines" : [ {
            "crowding" : {
              "trainLoadings" : [ {
                "naptanTo" : "aeiou",
                "line" : "aeiou",
                "timeSlice" : "aeiou",
                "platformDirection" : "aeiou",
                "value" : 123,
                "lineDirection" : "aeiou",
                "direction" : "aeiou"
              } ],
              "passengerFlows" : [ {
                "timeSlice" : "aeiou",
                "value" : 123
              } ]
            },
            "name" : "aeiou",
            "fullName" : "aeiou",
            "id" : "aeiou",
            "type" : "aeiou",
            "uri" : "aeiou"
          } ],
          "lat" : 1.3579000000000001069366817318950779736042022705078125,
          "lineModeGroups" : [ {
            "modeName" : "aeiou",
            "lineIdentifier" : [ "aeiou" ]
          } ],
          "childrenUrls" : [ "aeiou" ],
          "stationNaptan" : "aeiou",
          "fullName" : "aeiou",
          "stopType" : "aeiou",
          "naptanMode" : "aeiou",
          "url" : "aeiou",
          "placeType" : "aeiou",
          "naptanId" : "aeiou",
          "icsCode" : "aeiou",
          "lineGroup" : [ {
            "naptanIdReference" : "aeiou",
            "lineIdentifier" : [ "aeiou" ],
            "stationAtcoCode" : "aeiou"
          } ],
          "additionalProperties" : [ {
            "sourceSystemKey" : "aeiou",
            "modified" : "2000-01-23T04:56:07.000+00:00",
            "category" : "aeiou",
            "value" : "aeiou",
            "key" : "aeiou"
          } ],
          "accessibilitySummary" : "aeiou",
          "status" : true
        },
        "ordinal" : 123
      } ],
      "name" : "aeiou",
      "lineId" : "aeiou",
      "id" : "aeiou",
      "lineString" : "aeiou",
      "direction" : "aeiou"
    } ],
    "isBlocking" : true,
    "created" : "2000-01-23T04:56:07.000+00:00",
    "lastUpdate" : "2000-01-23T04:56:07.000+00:00",
    "additionalInfo" : "aeiou",
    "isWholeLine" : true,
    "description" : "aeiou",
    "affectedStops" : [ "" ],
    "category" : "aeiou",
    "type" : "aeiou",
    "categoryDescription" : "aeiou"
  } ],
  "lineStatuses" : [ {
    "statusSeverityDescription" : "aeiou",
    "reason" : "aeiou",
    "disruption" : "",
    "created" : "2000-01-23T04:56:07.000+00:00",
    "statusSeverity" : 123,
    "lineId" : "aeiou",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "validityPeriods" : [ {
      "fromDate" : "2000-01-23T04:56:07.000+00:00",
      "isNow" : true,
      "toDate" : "2000-01-23T04:56:07.000+00:00"
    } ],
    "id" : 123
  } ],
  "crowding" : "",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "name" : "aeiou",
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "serviceTypes" : [ {
    "name" : "aeiou",
    "uri" : "aeiou"
  } ],
  "id" : "aeiou"
} ]}, {contentType=application/xml, example=<null>
  <id>aeiou</id>
  <name>aeiou</name>
  <modeName>aeiou</modeName>
  <created>2000-01-23T04:56:07.000Z</created>
  <modified>2000-01-23T04:56:07.000Z</modified>
</null>}]
     - examples: [{contentType=application/json, example=[ {
  "routeSections" : [ {
    "routeCode" : "aeiou",
    "serviceType" : "aeiou",
    "originationName" : "aeiou",
    "destinationName" : "aeiou",
    "name" : "aeiou",
    "destination" : "aeiou",
    "originator" : "aeiou",
    "direction" : "aeiou"
  } ],
  "modeName" : "aeiou",
  "disruptions" : [ {
    "closureText" : "aeiou",
    "affectedRoutes" : [ {
      "routeCode" : "aeiou",
      "originationName" : "aeiou",
      "destinationName" : "aeiou",
      "routeSectionNaptanEntrySequence" : [ {
        "stopPoint" : {
          "indicator" : "aeiou",
          "commonName" : "aeiou",
          "modes" : [ "aeiou" ],
          "distance" : 1.3579000000000001069366817318950779736042022705078125,
          "smsCode" : "aeiou",
          "lon" : 1.3579000000000001069366817318950779736042022705078125,
          "children" : [ {
            "commonName" : "aeiou",
            "placeType" : "aeiou",
            "distance" : 1.3579000000000001069366817318950779736042022705078125,
            "children" : [ "" ],
            "childrenUrls" : [ "aeiou" ],
            "lon" : 1.3579000000000001069366817318950779736042022705078125,
            "id" : "aeiou",
            "additionalProperties" : [ "" ],
            "url" : "aeiou",
            "lat" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "hubNaptanCode" : "aeiou",
          "stopLetter" : "aeiou",
          "id" : "aeiou",
          "platformName" : "aeiou",
          "lines" : [ {
            "crowding" : {
              "trainLoadings" : [ {
                "naptanTo" : "aeiou",
                "line" : "aeiou",
                "timeSlice" : "aeiou",
                "platformDirection" : "aeiou",
                "value" : 123,
                "lineDirection" : "aeiou",
                "direction" : "aeiou"
              } ],
              "passengerFlows" : [ {
                "timeSlice" : "aeiou",
                "value" : 123
              } ]
            },
            "name" : "aeiou",
            "fullName" : "aeiou",
            "id" : "aeiou",
            "type" : "aeiou",
            "uri" : "aeiou"
          } ],
          "lat" : 1.3579000000000001069366817318950779736042022705078125,
          "lineModeGroups" : [ {
            "modeName" : "aeiou",
            "lineIdentifier" : [ "aeiou" ]
          } ],
          "childrenUrls" : [ "aeiou" ],
          "stationNaptan" : "aeiou",
          "fullName" : "aeiou",
          "stopType" : "aeiou",
          "naptanMode" : "aeiou",
          "url" : "aeiou",
          "placeType" : "aeiou",
          "naptanId" : "aeiou",
          "icsCode" : "aeiou",
          "lineGroup" : [ {
            "naptanIdReference" : "aeiou",
            "lineIdentifier" : [ "aeiou" ],
            "stationAtcoCode" : "aeiou"
          } ],
          "additionalProperties" : [ {
            "sourceSystemKey" : "aeiou",
            "modified" : "2000-01-23T04:56:07.000+00:00",
            "category" : "aeiou",
            "value" : "aeiou",
            "key" : "aeiou"
          } ],
          "accessibilitySummary" : "aeiou",
          "status" : true
        },
        "ordinal" : 123
      } ],
      "name" : "aeiou",
      "lineId" : "aeiou",
      "id" : "aeiou",
      "lineString" : "aeiou",
      "direction" : "aeiou"
    } ],
    "isBlocking" : true,
    "created" : "2000-01-23T04:56:07.000+00:00",
    "lastUpdate" : "2000-01-23T04:56:07.000+00:00",
    "additionalInfo" : "aeiou",
    "isWholeLine" : true,
    "description" : "aeiou",
    "affectedStops" : [ "" ],
    "category" : "aeiou",
    "type" : "aeiou",
    "categoryDescription" : "aeiou"
  } ],
  "lineStatuses" : [ {
    "statusSeverityDescription" : "aeiou",
    "reason" : "aeiou",
    "disruption" : "",
    "created" : "2000-01-23T04:56:07.000+00:00",
    "statusSeverity" : 123,
    "lineId" : "aeiou",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "validityPeriods" : [ {
      "fromDate" : "2000-01-23T04:56:07.000+00:00",
      "isNow" : true,
      "toDate" : "2000-01-23T04:56:07.000+00:00"
    } ],
    "id" : 123
  } ],
  "crowding" : "",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "name" : "aeiou",
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "serviceTypes" : [ {
    "name" : "aeiou",
    "uri" : "aeiou"
  } ],
  "id" : "aeiou"
} ]}, {contentType=application/xml, example=<null>
  <id>aeiou</id>
  <name>aeiou</name>
  <modeName>aeiou</modeName>
  <created>2000-01-23T04:56:07.000Z</created>
  <modified>2000-01-23T04:56:07.000Z</modified>
</null>}]
     
     - parameter ids: (path) A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. 

     - returns: RequestBuilder<[Line]> 
     */
    open class func lineGetWithRequestBuilder(ids: [String]) -> RequestBuilder<[Line]> {
        var path = "/Line/{ids}"
        path = path.replacingOccurrences(of: "{ids}", with: ids.asParameter, options: .literal, range: nil)
        let URLString = RxTfLAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[Line]>.Type = RxTfLAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Gets lines that serve the given modes.
     
     - parameter modes: (path) A comma-separated list of modes e.g. tube,dlr 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func lineGetByMode(modes: [String], completion: @escaping ((_ data: [Line]?,_ error: Error?) -> Void)) {
        lineGetByModeWithRequestBuilder(modes: modes).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Gets lines that serve the given modes.
     
     - parameter modes: (path) A comma-separated list of modes e.g. tube,dlr 
     - returns: Observable<[Line]>
     */
    open class func lineGetByMode(modes: [String]) -> Observable<[Line]> {
        return Observable.create { observer -> Disposable in
            lineGetByMode(modes: modes) { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Gets lines that serve the given modes.
     - GET /Line/Mode/{modes}
     - examples: [{contentType=application/json, example=[ {
  "routeSections" : [ {
    "routeCode" : "aeiou",
    "serviceType" : "aeiou",
    "originationName" : "aeiou",
    "destinationName" : "aeiou",
    "name" : "aeiou",
    "destination" : "aeiou",
    "originator" : "aeiou",
    "direction" : "aeiou"
  } ],
  "modeName" : "aeiou",
  "disruptions" : [ {
    "closureText" : "aeiou",
    "affectedRoutes" : [ {
      "routeCode" : "aeiou",
      "originationName" : "aeiou",
      "destinationName" : "aeiou",
      "routeSectionNaptanEntrySequence" : [ {
        "stopPoint" : {
          "indicator" : "aeiou",
          "commonName" : "aeiou",
          "modes" : [ "aeiou" ],
          "distance" : 1.3579000000000001069366817318950779736042022705078125,
          "smsCode" : "aeiou",
          "lon" : 1.3579000000000001069366817318950779736042022705078125,
          "children" : [ {
            "commonName" : "aeiou",
            "placeType" : "aeiou",
            "distance" : 1.3579000000000001069366817318950779736042022705078125,
            "children" : [ "" ],
            "childrenUrls" : [ "aeiou" ],
            "lon" : 1.3579000000000001069366817318950779736042022705078125,
            "id" : "aeiou",
            "additionalProperties" : [ "" ],
            "url" : "aeiou",
            "lat" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "hubNaptanCode" : "aeiou",
          "stopLetter" : "aeiou",
          "id" : "aeiou",
          "platformName" : "aeiou",
          "lines" : [ {
            "crowding" : {
              "trainLoadings" : [ {
                "naptanTo" : "aeiou",
                "line" : "aeiou",
                "timeSlice" : "aeiou",
                "platformDirection" : "aeiou",
                "value" : 123,
                "lineDirection" : "aeiou",
                "direction" : "aeiou"
              } ],
              "passengerFlows" : [ {
                "timeSlice" : "aeiou",
                "value" : 123
              } ]
            },
            "name" : "aeiou",
            "fullName" : "aeiou",
            "id" : "aeiou",
            "type" : "aeiou",
            "uri" : "aeiou"
          } ],
          "lat" : 1.3579000000000001069366817318950779736042022705078125,
          "lineModeGroups" : [ {
            "modeName" : "aeiou",
            "lineIdentifier" : [ "aeiou" ]
          } ],
          "childrenUrls" : [ "aeiou" ],
          "stationNaptan" : "aeiou",
          "fullName" : "aeiou",
          "stopType" : "aeiou",
          "naptanMode" : "aeiou",
          "url" : "aeiou",
          "placeType" : "aeiou",
          "naptanId" : "aeiou",
          "icsCode" : "aeiou",
          "lineGroup" : [ {
            "naptanIdReference" : "aeiou",
            "lineIdentifier" : [ "aeiou" ],
            "stationAtcoCode" : "aeiou"
          } ],
          "additionalProperties" : [ {
            "sourceSystemKey" : "aeiou",
            "modified" : "2000-01-23T04:56:07.000+00:00",
            "category" : "aeiou",
            "value" : "aeiou",
            "key" : "aeiou"
          } ],
          "accessibilitySummary" : "aeiou",
          "status" : true
        },
        "ordinal" : 123
      } ],
      "name" : "aeiou",
      "lineId" : "aeiou",
      "id" : "aeiou",
      "lineString" : "aeiou",
      "direction" : "aeiou"
    } ],
    "isBlocking" : true,
    "created" : "2000-01-23T04:56:07.000+00:00",
    "lastUpdate" : "2000-01-23T04:56:07.000+00:00",
    "additionalInfo" : "aeiou",
    "isWholeLine" : true,
    "description" : "aeiou",
    "affectedStops" : [ "" ],
    "category" : "aeiou",
    "type" : "aeiou",
    "categoryDescription" : "aeiou"
  } ],
  "lineStatuses" : [ {
    "statusSeverityDescription" : "aeiou",
    "reason" : "aeiou",
    "disruption" : "",
    "created" : "2000-01-23T04:56:07.000+00:00",
    "statusSeverity" : 123,
    "lineId" : "aeiou",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "validityPeriods" : [ {
      "fromDate" : "2000-01-23T04:56:07.000+00:00",
      "isNow" : true,
      "toDate" : "2000-01-23T04:56:07.000+00:00"
    } ],
    "id" : 123
  } ],
  "crowding" : "",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "name" : "aeiou",
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "serviceTypes" : [ {
    "name" : "aeiou",
    "uri" : "aeiou"
  } ],
  "id" : "aeiou"
} ]}, {contentType=application/xml, example=<null>
  <id>aeiou</id>
  <name>aeiou</name>
  <modeName>aeiou</modeName>
  <created>2000-01-23T04:56:07.000Z</created>
  <modified>2000-01-23T04:56:07.000Z</modified>
</null>}]
     - examples: [{contentType=application/json, example=[ {
  "routeSections" : [ {
    "routeCode" : "aeiou",
    "serviceType" : "aeiou",
    "originationName" : "aeiou",
    "destinationName" : "aeiou",
    "name" : "aeiou",
    "destination" : "aeiou",
    "originator" : "aeiou",
    "direction" : "aeiou"
  } ],
  "modeName" : "aeiou",
  "disruptions" : [ {
    "closureText" : "aeiou",
    "affectedRoutes" : [ {
      "routeCode" : "aeiou",
      "originationName" : "aeiou",
      "destinationName" : "aeiou",
      "routeSectionNaptanEntrySequence" : [ {
        "stopPoint" : {
          "indicator" : "aeiou",
          "commonName" : "aeiou",
          "modes" : [ "aeiou" ],
          "distance" : 1.3579000000000001069366817318950779736042022705078125,
          "smsCode" : "aeiou",
          "lon" : 1.3579000000000001069366817318950779736042022705078125,
          "children" : [ {
            "commonName" : "aeiou",
            "placeType" : "aeiou",
            "distance" : 1.3579000000000001069366817318950779736042022705078125,
            "children" : [ "" ],
            "childrenUrls" : [ "aeiou" ],
            "lon" : 1.3579000000000001069366817318950779736042022705078125,
            "id" : "aeiou",
            "additionalProperties" : [ "" ],
            "url" : "aeiou",
            "lat" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "hubNaptanCode" : "aeiou",
          "stopLetter" : "aeiou",
          "id" : "aeiou",
          "platformName" : "aeiou",
          "lines" : [ {
            "crowding" : {
              "trainLoadings" : [ {
                "naptanTo" : "aeiou",
                "line" : "aeiou",
                "timeSlice" : "aeiou",
                "platformDirection" : "aeiou",
                "value" : 123,
                "lineDirection" : "aeiou",
                "direction" : "aeiou"
              } ],
              "passengerFlows" : [ {
                "timeSlice" : "aeiou",
                "value" : 123
              } ]
            },
            "name" : "aeiou",
            "fullName" : "aeiou",
            "id" : "aeiou",
            "type" : "aeiou",
            "uri" : "aeiou"
          } ],
          "lat" : 1.3579000000000001069366817318950779736042022705078125,
          "lineModeGroups" : [ {
            "modeName" : "aeiou",
            "lineIdentifier" : [ "aeiou" ]
          } ],
          "childrenUrls" : [ "aeiou" ],
          "stationNaptan" : "aeiou",
          "fullName" : "aeiou",
          "stopType" : "aeiou",
          "naptanMode" : "aeiou",
          "url" : "aeiou",
          "placeType" : "aeiou",
          "naptanId" : "aeiou",
          "icsCode" : "aeiou",
          "lineGroup" : [ {
            "naptanIdReference" : "aeiou",
            "lineIdentifier" : [ "aeiou" ],
            "stationAtcoCode" : "aeiou"
          } ],
          "additionalProperties" : [ {
            "sourceSystemKey" : "aeiou",
            "modified" : "2000-01-23T04:56:07.000+00:00",
            "category" : "aeiou",
            "value" : "aeiou",
            "key" : "aeiou"
          } ],
          "accessibilitySummary" : "aeiou",
          "status" : true
        },
        "ordinal" : 123
      } ],
      "name" : "aeiou",
      "lineId" : "aeiou",
      "id" : "aeiou",
      "lineString" : "aeiou",
      "direction" : "aeiou"
    } ],
    "isBlocking" : true,
    "created" : "2000-01-23T04:56:07.000+00:00",
    "lastUpdate" : "2000-01-23T04:56:07.000+00:00",
    "additionalInfo" : "aeiou",
    "isWholeLine" : true,
    "description" : "aeiou",
    "affectedStops" : [ "" ],
    "category" : "aeiou",
    "type" : "aeiou",
    "categoryDescription" : "aeiou"
  } ],
  "lineStatuses" : [ {
    "statusSeverityDescription" : "aeiou",
    "reason" : "aeiou",
    "disruption" : "",
    "created" : "2000-01-23T04:56:07.000+00:00",
    "statusSeverity" : 123,
    "lineId" : "aeiou",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "validityPeriods" : [ {
      "fromDate" : "2000-01-23T04:56:07.000+00:00",
      "isNow" : true,
      "toDate" : "2000-01-23T04:56:07.000+00:00"
    } ],
    "id" : 123
  } ],
  "crowding" : "",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "name" : "aeiou",
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "serviceTypes" : [ {
    "name" : "aeiou",
    "uri" : "aeiou"
  } ],
  "id" : "aeiou"
} ]}, {contentType=application/xml, example=<null>
  <id>aeiou</id>
  <name>aeiou</name>
  <modeName>aeiou</modeName>
  <created>2000-01-23T04:56:07.000Z</created>
  <modified>2000-01-23T04:56:07.000Z</modified>
</null>}]
     
     - parameter modes: (path) A comma-separated list of modes e.g. tube,dlr 

     - returns: RequestBuilder<[Line]> 
     */
    open class func lineGetByModeWithRequestBuilder(modes: [String]) -> RequestBuilder<[Line]> {
        var path = "/Line/Mode/{modes}"
        path = path.replacingOccurrences(of: "{modes}", with: modes.asParameter, options: .literal, range: nil)
        let URLString = RxTfLAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[Line]>.Type = RxTfLAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter serviceTypes
     */
    public enum ServiceTypes_lineLineRoutesByIds: String { 
        case regular = "Regular"
        case night = "Night"
    }

    /**
     Get all valid routes for given line ids, including the name and id of the originating and terminating stops for each route.
     
     - parameter ids: (path) A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. 
     - parameter serviceTypes: (query) A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func lineLineRoutesByIds(ids: [String], serviceTypes: [String]? = nil, completion: @escaping ((_ data: [Line]?,_ error: Error?) -> Void)) {
        lineLineRoutesByIdsWithRequestBuilder(ids: ids, serviceTypes: serviceTypes).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get all valid routes for given line ids, including the name and id of the originating and terminating stops for each route.
     
     - parameter ids: (path) A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. 
     - parameter serviceTypes: (query) A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     - returns: Observable<[Line]>
     */
    open class func lineLineRoutesByIds(ids: [String], serviceTypes: [String]? = nil) -> Observable<[Line]> {
        return Observable.create { observer -> Disposable in
            lineLineRoutesByIds(ids: ids, serviceTypes: serviceTypes) { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get all valid routes for given line ids, including the name and id of the originating and terminating stops for each route.
     - GET /Line/{ids}/Route
     - examples: [{contentType=application/json, example=[ {
  "routeSections" : [ {
    "routeCode" : "aeiou",
    "serviceType" : "aeiou",
    "originationName" : "aeiou",
    "destinationName" : "aeiou",
    "name" : "aeiou",
    "destination" : "aeiou",
    "originator" : "aeiou",
    "direction" : "aeiou"
  } ],
  "modeName" : "aeiou",
  "disruptions" : [ {
    "closureText" : "aeiou",
    "affectedRoutes" : [ {
      "routeCode" : "aeiou",
      "originationName" : "aeiou",
      "destinationName" : "aeiou",
      "routeSectionNaptanEntrySequence" : [ {
        "stopPoint" : {
          "indicator" : "aeiou",
          "commonName" : "aeiou",
          "modes" : [ "aeiou" ],
          "distance" : 1.3579000000000001069366817318950779736042022705078125,
          "smsCode" : "aeiou",
          "lon" : 1.3579000000000001069366817318950779736042022705078125,
          "children" : [ {
            "commonName" : "aeiou",
            "placeType" : "aeiou",
            "distance" : 1.3579000000000001069366817318950779736042022705078125,
            "children" : [ "" ],
            "childrenUrls" : [ "aeiou" ],
            "lon" : 1.3579000000000001069366817318950779736042022705078125,
            "id" : "aeiou",
            "additionalProperties" : [ "" ],
            "url" : "aeiou",
            "lat" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "hubNaptanCode" : "aeiou",
          "stopLetter" : "aeiou",
          "id" : "aeiou",
          "platformName" : "aeiou",
          "lines" : [ {
            "crowding" : {
              "trainLoadings" : [ {
                "naptanTo" : "aeiou",
                "line" : "aeiou",
                "timeSlice" : "aeiou",
                "platformDirection" : "aeiou",
                "value" : 123,
                "lineDirection" : "aeiou",
                "direction" : "aeiou"
              } ],
              "passengerFlows" : [ {
                "timeSlice" : "aeiou",
                "value" : 123
              } ]
            },
            "name" : "aeiou",
            "fullName" : "aeiou",
            "id" : "aeiou",
            "type" : "aeiou",
            "uri" : "aeiou"
          } ],
          "lat" : 1.3579000000000001069366817318950779736042022705078125,
          "lineModeGroups" : [ {
            "modeName" : "aeiou",
            "lineIdentifier" : [ "aeiou" ]
          } ],
          "childrenUrls" : [ "aeiou" ],
          "stationNaptan" : "aeiou",
          "fullName" : "aeiou",
          "stopType" : "aeiou",
          "naptanMode" : "aeiou",
          "url" : "aeiou",
          "placeType" : "aeiou",
          "naptanId" : "aeiou",
          "icsCode" : "aeiou",
          "lineGroup" : [ {
            "naptanIdReference" : "aeiou",
            "lineIdentifier" : [ "aeiou" ],
            "stationAtcoCode" : "aeiou"
          } ],
          "additionalProperties" : [ {
            "sourceSystemKey" : "aeiou",
            "modified" : "2000-01-23T04:56:07.000+00:00",
            "category" : "aeiou",
            "value" : "aeiou",
            "key" : "aeiou"
          } ],
          "accessibilitySummary" : "aeiou",
          "status" : true
        },
        "ordinal" : 123
      } ],
      "name" : "aeiou",
      "lineId" : "aeiou",
      "id" : "aeiou",
      "lineString" : "aeiou",
      "direction" : "aeiou"
    } ],
    "isBlocking" : true,
    "created" : "2000-01-23T04:56:07.000+00:00",
    "lastUpdate" : "2000-01-23T04:56:07.000+00:00",
    "additionalInfo" : "aeiou",
    "isWholeLine" : true,
    "description" : "aeiou",
    "affectedStops" : [ "" ],
    "category" : "aeiou",
    "type" : "aeiou",
    "categoryDescription" : "aeiou"
  } ],
  "lineStatuses" : [ {
    "statusSeverityDescription" : "aeiou",
    "reason" : "aeiou",
    "disruption" : "",
    "created" : "2000-01-23T04:56:07.000+00:00",
    "statusSeverity" : 123,
    "lineId" : "aeiou",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "validityPeriods" : [ {
      "fromDate" : "2000-01-23T04:56:07.000+00:00",
      "isNow" : true,
      "toDate" : "2000-01-23T04:56:07.000+00:00"
    } ],
    "id" : 123
  } ],
  "crowding" : "",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "name" : "aeiou",
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "serviceTypes" : [ {
    "name" : "aeiou",
    "uri" : "aeiou"
  } ],
  "id" : "aeiou"
} ]}, {contentType=application/xml, example=<null>
  <id>aeiou</id>
  <name>aeiou</name>
  <modeName>aeiou</modeName>
  <created>2000-01-23T04:56:07.000Z</created>
  <modified>2000-01-23T04:56:07.000Z</modified>
</null>}]
     - examples: [{contentType=application/json, example=[ {
  "routeSections" : [ {
    "routeCode" : "aeiou",
    "serviceType" : "aeiou",
    "originationName" : "aeiou",
    "destinationName" : "aeiou",
    "name" : "aeiou",
    "destination" : "aeiou",
    "originator" : "aeiou",
    "direction" : "aeiou"
  } ],
  "modeName" : "aeiou",
  "disruptions" : [ {
    "closureText" : "aeiou",
    "affectedRoutes" : [ {
      "routeCode" : "aeiou",
      "originationName" : "aeiou",
      "destinationName" : "aeiou",
      "routeSectionNaptanEntrySequence" : [ {
        "stopPoint" : {
          "indicator" : "aeiou",
          "commonName" : "aeiou",
          "modes" : [ "aeiou" ],
          "distance" : 1.3579000000000001069366817318950779736042022705078125,
          "smsCode" : "aeiou",
          "lon" : 1.3579000000000001069366817318950779736042022705078125,
          "children" : [ {
            "commonName" : "aeiou",
            "placeType" : "aeiou",
            "distance" : 1.3579000000000001069366817318950779736042022705078125,
            "children" : [ "" ],
            "childrenUrls" : [ "aeiou" ],
            "lon" : 1.3579000000000001069366817318950779736042022705078125,
            "id" : "aeiou",
            "additionalProperties" : [ "" ],
            "url" : "aeiou",
            "lat" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "hubNaptanCode" : "aeiou",
          "stopLetter" : "aeiou",
          "id" : "aeiou",
          "platformName" : "aeiou",
          "lines" : [ {
            "crowding" : {
              "trainLoadings" : [ {
                "naptanTo" : "aeiou",
                "line" : "aeiou",
                "timeSlice" : "aeiou",
                "platformDirection" : "aeiou",
                "value" : 123,
                "lineDirection" : "aeiou",
                "direction" : "aeiou"
              } ],
              "passengerFlows" : [ {
                "timeSlice" : "aeiou",
                "value" : 123
              } ]
            },
            "name" : "aeiou",
            "fullName" : "aeiou",
            "id" : "aeiou",
            "type" : "aeiou",
            "uri" : "aeiou"
          } ],
          "lat" : 1.3579000000000001069366817318950779736042022705078125,
          "lineModeGroups" : [ {
            "modeName" : "aeiou",
            "lineIdentifier" : [ "aeiou" ]
          } ],
          "childrenUrls" : [ "aeiou" ],
          "stationNaptan" : "aeiou",
          "fullName" : "aeiou",
          "stopType" : "aeiou",
          "naptanMode" : "aeiou",
          "url" : "aeiou",
          "placeType" : "aeiou",
          "naptanId" : "aeiou",
          "icsCode" : "aeiou",
          "lineGroup" : [ {
            "naptanIdReference" : "aeiou",
            "lineIdentifier" : [ "aeiou" ],
            "stationAtcoCode" : "aeiou"
          } ],
          "additionalProperties" : [ {
            "sourceSystemKey" : "aeiou",
            "modified" : "2000-01-23T04:56:07.000+00:00",
            "category" : "aeiou",
            "value" : "aeiou",
            "key" : "aeiou"
          } ],
          "accessibilitySummary" : "aeiou",
          "status" : true
        },
        "ordinal" : 123
      } ],
      "name" : "aeiou",
      "lineId" : "aeiou",
      "id" : "aeiou",
      "lineString" : "aeiou",
      "direction" : "aeiou"
    } ],
    "isBlocking" : true,
    "created" : "2000-01-23T04:56:07.000+00:00",
    "lastUpdate" : "2000-01-23T04:56:07.000+00:00",
    "additionalInfo" : "aeiou",
    "isWholeLine" : true,
    "description" : "aeiou",
    "affectedStops" : [ "" ],
    "category" : "aeiou",
    "type" : "aeiou",
    "categoryDescription" : "aeiou"
  } ],
  "lineStatuses" : [ {
    "statusSeverityDescription" : "aeiou",
    "reason" : "aeiou",
    "disruption" : "",
    "created" : "2000-01-23T04:56:07.000+00:00",
    "statusSeverity" : 123,
    "lineId" : "aeiou",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "validityPeriods" : [ {
      "fromDate" : "2000-01-23T04:56:07.000+00:00",
      "isNow" : true,
      "toDate" : "2000-01-23T04:56:07.000+00:00"
    } ],
    "id" : 123
  } ],
  "crowding" : "",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "name" : "aeiou",
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "serviceTypes" : [ {
    "name" : "aeiou",
    "uri" : "aeiou"
  } ],
  "id" : "aeiou"
} ]}, {contentType=application/xml, example=<null>
  <id>aeiou</id>
  <name>aeiou</name>
  <modeName>aeiou</modeName>
  <created>2000-01-23T04:56:07.000Z</created>
  <modified>2000-01-23T04:56:07.000Z</modified>
</null>}]
     
     - parameter ids: (path) A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. 
     - parameter serviceTypes: (query) A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)

     - returns: RequestBuilder<[Line]> 
     */
    open class func lineLineRoutesByIdsWithRequestBuilder(ids: [String], serviceTypes: [String]? = nil) -> RequestBuilder<[Line]> {
        var path = "/Line/{ids}/Route"
        path = path.replacingOccurrences(of: "{ids}", with: ids.asParameter, options: .literal, range: nil)
        let URLString = RxTfLAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "serviceTypes": serviceTypes
        ])
        

        let requestBuilder: RequestBuilder<[Line]>.Type = RxTfLAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Gets a list of valid disruption categories
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func lineMetaDisruptionCategories(completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        lineMetaDisruptionCategoriesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Gets a list of valid disruption categories
     
     - returns: Observable<[String]>
     */
    open class func lineMetaDisruptionCategories() -> Observable<[String]> {
        return Observable.create { observer -> Disposable in
            lineMetaDisruptionCategories() { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Gets a list of valid disruption categories
     - GET /Line/Meta/DisruptionCategories
     - examples: [{contentType=application/json, example=[ "aeiou" ]}, {contentType=application/xml, example=aeiou}]
     - examples: [{contentType=application/json, example=[ "aeiou" ]}, {contentType=application/xml, example=aeiou}]

     - returns: RequestBuilder<[String]> 
     */
    open class func lineMetaDisruptionCategoriesWithRequestBuilder() -> RequestBuilder<[String]> {
        let path = "/Line/Meta/DisruptionCategories"
        let URLString = RxTfLAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[String]>.Type = RxTfLAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Gets a list of valid modes
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func lineMetaModes(completion: @escaping ((_ data: [Mode]?,_ error: Error?) -> Void)) {
        lineMetaModesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Gets a list of valid modes
     
     - returns: Observable<[Mode]>
     */
    open class func lineMetaModes() -> Observable<[Mode]> {
        return Observable.create { observer -> Disposable in
            lineMetaModes() { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Gets a list of valid modes
     - GET /Line/Meta/Modes
     - examples: [{contentType=application/json, example=[ {
  "modeName" : "aeiou",
  "isTflService" : true,
  "isFarePaying" : true,
  "isScheduledService" : true
} ]}, {contentType=application/xml, example=<null>
  <isTflService>true</isTflService>
  <isFarePaying>true</isFarePaying>
  <isScheduledService>true</isScheduledService>
  <modeName>aeiou</modeName>
</null>}]
     - examples: [{contentType=application/json, example=[ {
  "modeName" : "aeiou",
  "isTflService" : true,
  "isFarePaying" : true,
  "isScheduledService" : true
} ]}, {contentType=application/xml, example=<null>
  <isTflService>true</isTflService>
  <isFarePaying>true</isFarePaying>
  <isScheduledService>true</isScheduledService>
  <modeName>aeiou</modeName>
</null>}]

     - returns: RequestBuilder<[Mode]> 
     */
    open class func lineMetaModesWithRequestBuilder() -> RequestBuilder<[Mode]> {
        let path = "/Line/Meta/Modes"
        let URLString = RxTfLAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[Mode]>.Type = RxTfLAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Gets a list of valid ServiceTypes to filter on
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func lineMetaServiceTypes(completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        lineMetaServiceTypesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Gets a list of valid ServiceTypes to filter on
     
     - returns: Observable<[String]>
     */
    open class func lineMetaServiceTypes() -> Observable<[String]> {
        return Observable.create { observer -> Disposable in
            lineMetaServiceTypes() { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Gets a list of valid ServiceTypes to filter on
     - GET /Line/Meta/ServiceTypes
     - examples: [{contentType=application/json, example=[ "aeiou" ]}, {contentType=application/xml, example=aeiou}]
     - examples: [{contentType=application/json, example=[ "aeiou" ]}, {contentType=application/xml, example=aeiou}]

     - returns: RequestBuilder<[String]> 
     */
    open class func lineMetaServiceTypesWithRequestBuilder() -> RequestBuilder<[String]> {
        let path = "/Line/Meta/ServiceTypes"
        let URLString = RxTfLAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[String]>.Type = RxTfLAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Gets a list of valid severity codes
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func lineMetaSeverity(completion: @escaping ((_ data: [StatusSeverity]?,_ error: Error?) -> Void)) {
        lineMetaSeverityWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Gets a list of valid severity codes
     
     - returns: Observable<[StatusSeverity]>
     */
    open class func lineMetaSeverity() -> Observable<[StatusSeverity]> {
        return Observable.create { observer -> Disposable in
            lineMetaSeverity() { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Gets a list of valid severity codes
     - GET /Line/Meta/Severity
     - examples: [{contentType=application/json, example=[ {
  "severityLevel" : 123,
  "modeName" : "aeiou",
  "description" : "aeiou"
} ]}, {contentType=application/xml, example=<null>
  <modeName>aeiou</modeName>
  <severityLevel>123</severityLevel>
  <description>aeiou</description>
</null>}]
     - examples: [{contentType=application/json, example=[ {
  "severityLevel" : 123,
  "modeName" : "aeiou",
  "description" : "aeiou"
} ]}, {contentType=application/xml, example=<null>
  <modeName>aeiou</modeName>
  <severityLevel>123</severityLevel>
  <description>aeiou</description>
</null>}]

     - returns: RequestBuilder<[StatusSeverity]> 
     */
    open class func lineMetaSeverityWithRequestBuilder() -> RequestBuilder<[StatusSeverity]> {
        let path = "/Line/Meta/Severity"
        let URLString = RxTfLAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[StatusSeverity]>.Type = RxTfLAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter serviceTypes
     */
    public enum ServiceTypes_lineRoute: String { 
        case regular = "Regular"
        case night = "Night"
    }

    /**
     Get all valid routes for all lines, including the name and id of the originating and terminating stops for each route.
     
     - parameter serviceTypes: (query) A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func lineRoute(serviceTypes: [String]? = nil, completion: @escaping ((_ data: [Line]?,_ error: Error?) -> Void)) {
        lineRouteWithRequestBuilder(serviceTypes: serviceTypes).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get all valid routes for all lines, including the name and id of the originating and terminating stops for each route.
     
     - parameter serviceTypes: (query) A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     - returns: Observable<[Line]>
     */
    open class func lineRoute(serviceTypes: [String]? = nil) -> Observable<[Line]> {
        return Observable.create { observer -> Disposable in
            lineRoute(serviceTypes: serviceTypes) { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get all valid routes for all lines, including the name and id of the originating and terminating stops for each route.
     - GET /Line/Route
     - examples: [{contentType=application/json, example=[ {
  "routeSections" : [ {
    "routeCode" : "aeiou",
    "serviceType" : "aeiou",
    "originationName" : "aeiou",
    "destinationName" : "aeiou",
    "name" : "aeiou",
    "destination" : "aeiou",
    "originator" : "aeiou",
    "direction" : "aeiou"
  } ],
  "modeName" : "aeiou",
  "disruptions" : [ {
    "closureText" : "aeiou",
    "affectedRoutes" : [ {
      "routeCode" : "aeiou",
      "originationName" : "aeiou",
      "destinationName" : "aeiou",
      "routeSectionNaptanEntrySequence" : [ {
        "stopPoint" : {
          "indicator" : "aeiou",
          "commonName" : "aeiou",
          "modes" : [ "aeiou" ],
          "distance" : 1.3579000000000001069366817318950779736042022705078125,
          "smsCode" : "aeiou",
          "lon" : 1.3579000000000001069366817318950779736042022705078125,
          "children" : [ {
            "commonName" : "aeiou",
            "placeType" : "aeiou",
            "distance" : 1.3579000000000001069366817318950779736042022705078125,
            "children" : [ "" ],
            "childrenUrls" : [ "aeiou" ],
            "lon" : 1.3579000000000001069366817318950779736042022705078125,
            "id" : "aeiou",
            "additionalProperties" : [ "" ],
            "url" : "aeiou",
            "lat" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "hubNaptanCode" : "aeiou",
          "stopLetter" : "aeiou",
          "id" : "aeiou",
          "platformName" : "aeiou",
          "lines" : [ {
            "crowding" : {
              "trainLoadings" : [ {
                "naptanTo" : "aeiou",
                "line" : "aeiou",
                "timeSlice" : "aeiou",
                "platformDirection" : "aeiou",
                "value" : 123,
                "lineDirection" : "aeiou",
                "direction" : "aeiou"
              } ],
              "passengerFlows" : [ {
                "timeSlice" : "aeiou",
                "value" : 123
              } ]
            },
            "name" : "aeiou",
            "fullName" : "aeiou",
            "id" : "aeiou",
            "type" : "aeiou",
            "uri" : "aeiou"
          } ],
          "lat" : 1.3579000000000001069366817318950779736042022705078125,
          "lineModeGroups" : [ {
            "modeName" : "aeiou",
            "lineIdentifier" : [ "aeiou" ]
          } ],
          "childrenUrls" : [ "aeiou" ],
          "stationNaptan" : "aeiou",
          "fullName" : "aeiou",
          "stopType" : "aeiou",
          "naptanMode" : "aeiou",
          "url" : "aeiou",
          "placeType" : "aeiou",
          "naptanId" : "aeiou",
          "icsCode" : "aeiou",
          "lineGroup" : [ {
            "naptanIdReference" : "aeiou",
            "lineIdentifier" : [ "aeiou" ],
            "stationAtcoCode" : "aeiou"
          } ],
          "additionalProperties" : [ {
            "sourceSystemKey" : "aeiou",
            "modified" : "2000-01-23T04:56:07.000+00:00",
            "category" : "aeiou",
            "value" : "aeiou",
            "key" : "aeiou"
          } ],
          "accessibilitySummary" : "aeiou",
          "status" : true
        },
        "ordinal" : 123
      } ],
      "name" : "aeiou",
      "lineId" : "aeiou",
      "id" : "aeiou",
      "lineString" : "aeiou",
      "direction" : "aeiou"
    } ],
    "isBlocking" : true,
    "created" : "2000-01-23T04:56:07.000+00:00",
    "lastUpdate" : "2000-01-23T04:56:07.000+00:00",
    "additionalInfo" : "aeiou",
    "isWholeLine" : true,
    "description" : "aeiou",
    "affectedStops" : [ "" ],
    "category" : "aeiou",
    "type" : "aeiou",
    "categoryDescription" : "aeiou"
  } ],
  "lineStatuses" : [ {
    "statusSeverityDescription" : "aeiou",
    "reason" : "aeiou",
    "disruption" : "",
    "created" : "2000-01-23T04:56:07.000+00:00",
    "statusSeverity" : 123,
    "lineId" : "aeiou",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "validityPeriods" : [ {
      "fromDate" : "2000-01-23T04:56:07.000+00:00",
      "isNow" : true,
      "toDate" : "2000-01-23T04:56:07.000+00:00"
    } ],
    "id" : 123
  } ],
  "crowding" : "",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "name" : "aeiou",
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "serviceTypes" : [ {
    "name" : "aeiou",
    "uri" : "aeiou"
  } ],
  "id" : "aeiou"
} ]}, {contentType=application/xml, example=<null>
  <id>aeiou</id>
  <name>aeiou</name>
  <modeName>aeiou</modeName>
  <created>2000-01-23T04:56:07.000Z</created>
  <modified>2000-01-23T04:56:07.000Z</modified>
</null>}]
     - examples: [{contentType=application/json, example=[ {
  "routeSections" : [ {
    "routeCode" : "aeiou",
    "serviceType" : "aeiou",
    "originationName" : "aeiou",
    "destinationName" : "aeiou",
    "name" : "aeiou",
    "destination" : "aeiou",
    "originator" : "aeiou",
    "direction" : "aeiou"
  } ],
  "modeName" : "aeiou",
  "disruptions" : [ {
    "closureText" : "aeiou",
    "affectedRoutes" : [ {
      "routeCode" : "aeiou",
      "originationName" : "aeiou",
      "destinationName" : "aeiou",
      "routeSectionNaptanEntrySequence" : [ {
        "stopPoint" : {
          "indicator" : "aeiou",
          "commonName" : "aeiou",
          "modes" : [ "aeiou" ],
          "distance" : 1.3579000000000001069366817318950779736042022705078125,
          "smsCode" : "aeiou",
          "lon" : 1.3579000000000001069366817318950779736042022705078125,
          "children" : [ {
            "commonName" : "aeiou",
            "placeType" : "aeiou",
            "distance" : 1.3579000000000001069366817318950779736042022705078125,
            "children" : [ "" ],
            "childrenUrls" : [ "aeiou" ],
            "lon" : 1.3579000000000001069366817318950779736042022705078125,
            "id" : "aeiou",
            "additionalProperties" : [ "" ],
            "url" : "aeiou",
            "lat" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "hubNaptanCode" : "aeiou",
          "stopLetter" : "aeiou",
          "id" : "aeiou",
          "platformName" : "aeiou",
          "lines" : [ {
            "crowding" : {
              "trainLoadings" : [ {
                "naptanTo" : "aeiou",
                "line" : "aeiou",
                "timeSlice" : "aeiou",
                "platformDirection" : "aeiou",
                "value" : 123,
                "lineDirection" : "aeiou",
                "direction" : "aeiou"
              } ],
              "passengerFlows" : [ {
                "timeSlice" : "aeiou",
                "value" : 123
              } ]
            },
            "name" : "aeiou",
            "fullName" : "aeiou",
            "id" : "aeiou",
            "type" : "aeiou",
            "uri" : "aeiou"
          } ],
          "lat" : 1.3579000000000001069366817318950779736042022705078125,
          "lineModeGroups" : [ {
            "modeName" : "aeiou",
            "lineIdentifier" : [ "aeiou" ]
          } ],
          "childrenUrls" : [ "aeiou" ],
          "stationNaptan" : "aeiou",
          "fullName" : "aeiou",
          "stopType" : "aeiou",
          "naptanMode" : "aeiou",
          "url" : "aeiou",
          "placeType" : "aeiou",
          "naptanId" : "aeiou",
          "icsCode" : "aeiou",
          "lineGroup" : [ {
            "naptanIdReference" : "aeiou",
            "lineIdentifier" : [ "aeiou" ],
            "stationAtcoCode" : "aeiou"
          } ],
          "additionalProperties" : [ {
            "sourceSystemKey" : "aeiou",
            "modified" : "2000-01-23T04:56:07.000+00:00",
            "category" : "aeiou",
            "value" : "aeiou",
            "key" : "aeiou"
          } ],
          "accessibilitySummary" : "aeiou",
          "status" : true
        },
        "ordinal" : 123
      } ],
      "name" : "aeiou",
      "lineId" : "aeiou",
      "id" : "aeiou",
      "lineString" : "aeiou",
      "direction" : "aeiou"
    } ],
    "isBlocking" : true,
    "created" : "2000-01-23T04:56:07.000+00:00",
    "lastUpdate" : "2000-01-23T04:56:07.000+00:00",
    "additionalInfo" : "aeiou",
    "isWholeLine" : true,
    "description" : "aeiou",
    "affectedStops" : [ "" ],
    "category" : "aeiou",
    "type" : "aeiou",
    "categoryDescription" : "aeiou"
  } ],
  "lineStatuses" : [ {
    "statusSeverityDescription" : "aeiou",
    "reason" : "aeiou",
    "disruption" : "",
    "created" : "2000-01-23T04:56:07.000+00:00",
    "statusSeverity" : 123,
    "lineId" : "aeiou",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "validityPeriods" : [ {
      "fromDate" : "2000-01-23T04:56:07.000+00:00",
      "isNow" : true,
      "toDate" : "2000-01-23T04:56:07.000+00:00"
    } ],
    "id" : 123
  } ],
  "crowding" : "",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "name" : "aeiou",
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "serviceTypes" : [ {
    "name" : "aeiou",
    "uri" : "aeiou"
  } ],
  "id" : "aeiou"
} ]}, {contentType=application/xml, example=<null>
  <id>aeiou</id>
  <name>aeiou</name>
  <modeName>aeiou</modeName>
  <created>2000-01-23T04:56:07.000Z</created>
  <modified>2000-01-23T04:56:07.000Z</modified>
</null>}]
     
     - parameter serviceTypes: (query) A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)

     - returns: RequestBuilder<[Line]> 
     */
    open class func lineRouteWithRequestBuilder(serviceTypes: [String]? = nil) -> RequestBuilder<[Line]> {
        let path = "/Line/Route"
        let URLString = RxTfLAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "serviceTypes": serviceTypes
        ])
        

        let requestBuilder: RequestBuilder<[Line]>.Type = RxTfLAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter serviceTypes
     */
    public enum ServiceTypes_lineRouteByMode: String { 
        case regular = "Regular"
        case night = "Night"
    }

    /**
     Gets all lines and their valid routes for given modes, including the name and id of the originating and terminating stops for each route
     
     - parameter modes: (path) A comma-separated list of modes e.g. tube,dlr 
     - parameter serviceTypes: (query) A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func lineRouteByMode(modes: [String], serviceTypes: [String]? = nil, completion: @escaping ((_ data: [Line]?,_ error: Error?) -> Void)) {
        lineRouteByModeWithRequestBuilder(modes: modes, serviceTypes: serviceTypes).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Gets all lines and their valid routes for given modes, including the name and id of the originating and terminating stops for each route
     
     - parameter modes: (path) A comma-separated list of modes e.g. tube,dlr 
     - parameter serviceTypes: (query) A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     - returns: Observable<[Line]>
     */
    open class func lineRouteByMode(modes: [String], serviceTypes: [String]? = nil) -> Observable<[Line]> {
        return Observable.create { observer -> Disposable in
            lineRouteByMode(modes: modes, serviceTypes: serviceTypes) { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Gets all lines and their valid routes for given modes, including the name and id of the originating and terminating stops for each route
     - GET /Line/Mode/{modes}/Route
     - examples: [{contentType=application/json, example=[ {
  "routeSections" : [ {
    "routeCode" : "aeiou",
    "serviceType" : "aeiou",
    "originationName" : "aeiou",
    "destinationName" : "aeiou",
    "name" : "aeiou",
    "destination" : "aeiou",
    "originator" : "aeiou",
    "direction" : "aeiou"
  } ],
  "modeName" : "aeiou",
  "disruptions" : [ {
    "closureText" : "aeiou",
    "affectedRoutes" : [ {
      "routeCode" : "aeiou",
      "originationName" : "aeiou",
      "destinationName" : "aeiou",
      "routeSectionNaptanEntrySequence" : [ {
        "stopPoint" : {
          "indicator" : "aeiou",
          "commonName" : "aeiou",
          "modes" : [ "aeiou" ],
          "distance" : 1.3579000000000001069366817318950779736042022705078125,
          "smsCode" : "aeiou",
          "lon" : 1.3579000000000001069366817318950779736042022705078125,
          "children" : [ {
            "commonName" : "aeiou",
            "placeType" : "aeiou",
            "distance" : 1.3579000000000001069366817318950779736042022705078125,
            "children" : [ "" ],
            "childrenUrls" : [ "aeiou" ],
            "lon" : 1.3579000000000001069366817318950779736042022705078125,
            "id" : "aeiou",
            "additionalProperties" : [ "" ],
            "url" : "aeiou",
            "lat" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "hubNaptanCode" : "aeiou",
          "stopLetter" : "aeiou",
          "id" : "aeiou",
          "platformName" : "aeiou",
          "lines" : [ {
            "crowding" : {
              "trainLoadings" : [ {
                "naptanTo" : "aeiou",
                "line" : "aeiou",
                "timeSlice" : "aeiou",
                "platformDirection" : "aeiou",
                "value" : 123,
                "lineDirection" : "aeiou",
                "direction" : "aeiou"
              } ],
              "passengerFlows" : [ {
                "timeSlice" : "aeiou",
                "value" : 123
              } ]
            },
            "name" : "aeiou",
            "fullName" : "aeiou",
            "id" : "aeiou",
            "type" : "aeiou",
            "uri" : "aeiou"
          } ],
          "lat" : 1.3579000000000001069366817318950779736042022705078125,
          "lineModeGroups" : [ {
            "modeName" : "aeiou",
            "lineIdentifier" : [ "aeiou" ]
          } ],
          "childrenUrls" : [ "aeiou" ],
          "stationNaptan" : "aeiou",
          "fullName" : "aeiou",
          "stopType" : "aeiou",
          "naptanMode" : "aeiou",
          "url" : "aeiou",
          "placeType" : "aeiou",
          "naptanId" : "aeiou",
          "icsCode" : "aeiou",
          "lineGroup" : [ {
            "naptanIdReference" : "aeiou",
            "lineIdentifier" : [ "aeiou" ],
            "stationAtcoCode" : "aeiou"
          } ],
          "additionalProperties" : [ {
            "sourceSystemKey" : "aeiou",
            "modified" : "2000-01-23T04:56:07.000+00:00",
            "category" : "aeiou",
            "value" : "aeiou",
            "key" : "aeiou"
          } ],
          "accessibilitySummary" : "aeiou",
          "status" : true
        },
        "ordinal" : 123
      } ],
      "name" : "aeiou",
      "lineId" : "aeiou",
      "id" : "aeiou",
      "lineString" : "aeiou",
      "direction" : "aeiou"
    } ],
    "isBlocking" : true,
    "created" : "2000-01-23T04:56:07.000+00:00",
    "lastUpdate" : "2000-01-23T04:56:07.000+00:00",
    "additionalInfo" : "aeiou",
    "isWholeLine" : true,
    "description" : "aeiou",
    "affectedStops" : [ "" ],
    "category" : "aeiou",
    "type" : "aeiou",
    "categoryDescription" : "aeiou"
  } ],
  "lineStatuses" : [ {
    "statusSeverityDescription" : "aeiou",
    "reason" : "aeiou",
    "disruption" : "",
    "created" : "2000-01-23T04:56:07.000+00:00",
    "statusSeverity" : 123,
    "lineId" : "aeiou",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "validityPeriods" : [ {
      "fromDate" : "2000-01-23T04:56:07.000+00:00",
      "isNow" : true,
      "toDate" : "2000-01-23T04:56:07.000+00:00"
    } ],
    "id" : 123
  } ],
  "crowding" : "",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "name" : "aeiou",
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "serviceTypes" : [ {
    "name" : "aeiou",
    "uri" : "aeiou"
  } ],
  "id" : "aeiou"
} ]}, {contentType=application/xml, example=<null>
  <id>aeiou</id>
  <name>aeiou</name>
  <modeName>aeiou</modeName>
  <created>2000-01-23T04:56:07.000Z</created>
  <modified>2000-01-23T04:56:07.000Z</modified>
</null>}]
     - examples: [{contentType=application/json, example=[ {
  "routeSections" : [ {
    "routeCode" : "aeiou",
    "serviceType" : "aeiou",
    "originationName" : "aeiou",
    "destinationName" : "aeiou",
    "name" : "aeiou",
    "destination" : "aeiou",
    "originator" : "aeiou",
    "direction" : "aeiou"
  } ],
  "modeName" : "aeiou",
  "disruptions" : [ {
    "closureText" : "aeiou",
    "affectedRoutes" : [ {
      "routeCode" : "aeiou",
      "originationName" : "aeiou",
      "destinationName" : "aeiou",
      "routeSectionNaptanEntrySequence" : [ {
        "stopPoint" : {
          "indicator" : "aeiou",
          "commonName" : "aeiou",
          "modes" : [ "aeiou" ],
          "distance" : 1.3579000000000001069366817318950779736042022705078125,
          "smsCode" : "aeiou",
          "lon" : 1.3579000000000001069366817318950779736042022705078125,
          "children" : [ {
            "commonName" : "aeiou",
            "placeType" : "aeiou",
            "distance" : 1.3579000000000001069366817318950779736042022705078125,
            "children" : [ "" ],
            "childrenUrls" : [ "aeiou" ],
            "lon" : 1.3579000000000001069366817318950779736042022705078125,
            "id" : "aeiou",
            "additionalProperties" : [ "" ],
            "url" : "aeiou",
            "lat" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "hubNaptanCode" : "aeiou",
          "stopLetter" : "aeiou",
          "id" : "aeiou",
          "platformName" : "aeiou",
          "lines" : [ {
            "crowding" : {
              "trainLoadings" : [ {
                "naptanTo" : "aeiou",
                "line" : "aeiou",
                "timeSlice" : "aeiou",
                "platformDirection" : "aeiou",
                "value" : 123,
                "lineDirection" : "aeiou",
                "direction" : "aeiou"
              } ],
              "passengerFlows" : [ {
                "timeSlice" : "aeiou",
                "value" : 123
              } ]
            },
            "name" : "aeiou",
            "fullName" : "aeiou",
            "id" : "aeiou",
            "type" : "aeiou",
            "uri" : "aeiou"
          } ],
          "lat" : 1.3579000000000001069366817318950779736042022705078125,
          "lineModeGroups" : [ {
            "modeName" : "aeiou",
            "lineIdentifier" : [ "aeiou" ]
          } ],
          "childrenUrls" : [ "aeiou" ],
          "stationNaptan" : "aeiou",
          "fullName" : "aeiou",
          "stopType" : "aeiou",
          "naptanMode" : "aeiou",
          "url" : "aeiou",
          "placeType" : "aeiou",
          "naptanId" : "aeiou",
          "icsCode" : "aeiou",
          "lineGroup" : [ {
            "naptanIdReference" : "aeiou",
            "lineIdentifier" : [ "aeiou" ],
            "stationAtcoCode" : "aeiou"
          } ],
          "additionalProperties" : [ {
            "sourceSystemKey" : "aeiou",
            "modified" : "2000-01-23T04:56:07.000+00:00",
            "category" : "aeiou",
            "value" : "aeiou",
            "key" : "aeiou"
          } ],
          "accessibilitySummary" : "aeiou",
          "status" : true
        },
        "ordinal" : 123
      } ],
      "name" : "aeiou",
      "lineId" : "aeiou",
      "id" : "aeiou",
      "lineString" : "aeiou",
      "direction" : "aeiou"
    } ],
    "isBlocking" : true,
    "created" : "2000-01-23T04:56:07.000+00:00",
    "lastUpdate" : "2000-01-23T04:56:07.000+00:00",
    "additionalInfo" : "aeiou",
    "isWholeLine" : true,
    "description" : "aeiou",
    "affectedStops" : [ "" ],
    "category" : "aeiou",
    "type" : "aeiou",
    "categoryDescription" : "aeiou"
  } ],
  "lineStatuses" : [ {
    "statusSeverityDescription" : "aeiou",
    "reason" : "aeiou",
    "disruption" : "",
    "created" : "2000-01-23T04:56:07.000+00:00",
    "statusSeverity" : 123,
    "lineId" : "aeiou",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "validityPeriods" : [ {
      "fromDate" : "2000-01-23T04:56:07.000+00:00",
      "isNow" : true,
      "toDate" : "2000-01-23T04:56:07.000+00:00"
    } ],
    "id" : 123
  } ],
  "crowding" : "",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "name" : "aeiou",
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "serviceTypes" : [ {
    "name" : "aeiou",
    "uri" : "aeiou"
  } ],
  "id" : "aeiou"
} ]}, {contentType=application/xml, example=<null>
  <id>aeiou</id>
  <name>aeiou</name>
  <modeName>aeiou</modeName>
  <created>2000-01-23T04:56:07.000Z</created>
  <modified>2000-01-23T04:56:07.000Z</modified>
</null>}]
     
     - parameter modes: (path) A comma-separated list of modes e.g. tube,dlr 
     - parameter serviceTypes: (query) A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)

     - returns: RequestBuilder<[Line]> 
     */
    open class func lineRouteByModeWithRequestBuilder(modes: [String], serviceTypes: [String]? = nil) -> RequestBuilder<[Line]> {
        var path = "/Line/Mode/{modes}/Route"
        path = path.replacingOccurrences(of: "{modes}", with: modes.asParameter, options: .literal, range: nil)
        let URLString = RxTfLAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "serviceTypes": serviceTypes
        ])
        

        let requestBuilder: RequestBuilder<[Line]>.Type = RxTfLAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter direction
     */
    public enum Direction_lineRouteSequence: String { 
        case inbound = "inbound"
        case outbound = "outbound"
        case all = "all"
    }

    /**
     * enum for parameter serviceTypes
     */
    public enum ServiceTypes_lineRouteSequence: String { 
        case regular = "Regular"
        case night = "Night"
    }

    /**
     Gets all valid routes for given line id, including the sequence of stops on each route.
     
     - parameter id: (path) A single line id e.g. victoria 
     - parameter direction: (path) The direction of travel. Can be inbound or outbound. 
     - parameter serviceTypes: (query) A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     - parameter excludeCrowding: (query) That excludes crowding from line disruptions. Can be true or false. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func lineRouteSequence(id: String, direction: Direction_lineRouteSequence, serviceTypes: [String]? = nil, excludeCrowding: Bool? = nil, completion: @escaping ((_ data: RouteSequence?,_ error: Error?) -> Void)) {
        lineRouteSequenceWithRequestBuilder(id: id, direction: direction, serviceTypes: serviceTypes, excludeCrowding: excludeCrowding).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Gets all valid routes for given line id, including the sequence of stops on each route.
     
     - parameter id: (path) A single line id e.g. victoria 
     - parameter direction: (path) The direction of travel. Can be inbound or outbound. 
     - parameter serviceTypes: (query) A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     - parameter excludeCrowding: (query) That excludes crowding from line disruptions. Can be true or false. (optional)
     - returns: Observable<RouteSequence>
     */
    open class func lineRouteSequence(id: String, direction: Direction_lineRouteSequence, serviceTypes: [String]? = nil, excludeCrowding: Bool? = nil) -> Observable<RouteSequence> {
        return Observable.create { observer -> Disposable in
            lineRouteSequence(id: id, direction: direction, serviceTypes: serviceTypes, excludeCrowding: excludeCrowding) { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Gets all valid routes for given line id, including the sequence of stops on each route.
     - GET /Line/{id}/Route/Sequence/{direction}
     - examples: [{contentType=application/json, example={
  "mode" : "aeiou",
  "stopPointSequences" : [ {
    "serviceType" : "aeiou",
    "branchId" : 123,
    "prevBranchIds" : [ 123 ],
    "lineId" : "aeiou",
    "lineName" : "aeiou",
    "stopPoint" : [ "" ],
    "nextBranchIds" : [ 123 ],
    "direction" : "aeiou"
  } ],
  "lineStrings" : [ "aeiou" ],
  "orderedLineRoutes" : [ {
    "serviceType" : "aeiou",
    "name" : "aeiou",
    "naptanIds" : [ "aeiou" ]
  } ],
  "lineId" : "aeiou",
  "lineName" : "aeiou",
  "isOutboundOnly" : true,
  "stations" : [ {
    "icsId" : "aeiou",
    "hasDisruption" : true,
    "modes" : [ "aeiou" ],
    "stopType" : "aeiou",
    "lon" : 1.3579000000000001069366817318950779736042022705078125,
    "towards" : "aeiou",
    "parentId" : "aeiou",
    "url" : "aeiou",
    "routeId" : 123,
    "zone" : "aeiou",
    "name" : "aeiou",
    "topMostParentId" : "aeiou",
    "stopLetter" : "aeiou",
    "id" : "aeiou",
    "accessibilitySummary" : "aeiou",
    "lines" : [ {
      "crowding" : {
        "trainLoadings" : [ {
          "naptanTo" : "aeiou",
          "line" : "aeiou",
          "timeSlice" : "aeiou",
          "platformDirection" : "aeiou",
          "value" : 123,
          "lineDirection" : "aeiou",
          "direction" : "aeiou"
        } ],
        "passengerFlows" : [ {
          "timeSlice" : "aeiou",
          "value" : 123
        } ]
      },
      "name" : "aeiou",
      "fullName" : "aeiou",
      "id" : "aeiou",
      "type" : "aeiou",
      "uri" : "aeiou"
    } ],
    "lat" : 1.3579000000000001069366817318950779736042022705078125,
    "stationId" : "aeiou",
    "direction" : "aeiou",
    "status" : true
  } ],
  "direction" : "aeiou"
}}, {contentType=application/xml, example=<null>
  <lineId>aeiou</lineId>
  <lineName>aeiou</lineName>
  <direction>aeiou</direction>
  <isOutboundOnly>true</isOutboundOnly>
  <mode>aeiou</mode>
  <lineStrings>aeiou</lineStrings>
</null>}]
     - examples: [{contentType=application/json, example={
  "mode" : "aeiou",
  "stopPointSequences" : [ {
    "serviceType" : "aeiou",
    "branchId" : 123,
    "prevBranchIds" : [ 123 ],
    "lineId" : "aeiou",
    "lineName" : "aeiou",
    "stopPoint" : [ "" ],
    "nextBranchIds" : [ 123 ],
    "direction" : "aeiou"
  } ],
  "lineStrings" : [ "aeiou" ],
  "orderedLineRoutes" : [ {
    "serviceType" : "aeiou",
    "name" : "aeiou",
    "naptanIds" : [ "aeiou" ]
  } ],
  "lineId" : "aeiou",
  "lineName" : "aeiou",
  "isOutboundOnly" : true,
  "stations" : [ {
    "icsId" : "aeiou",
    "hasDisruption" : true,
    "modes" : [ "aeiou" ],
    "stopType" : "aeiou",
    "lon" : 1.3579000000000001069366817318950779736042022705078125,
    "towards" : "aeiou",
    "parentId" : "aeiou",
    "url" : "aeiou",
    "routeId" : 123,
    "zone" : "aeiou",
    "name" : "aeiou",
    "topMostParentId" : "aeiou",
    "stopLetter" : "aeiou",
    "id" : "aeiou",
    "accessibilitySummary" : "aeiou",
    "lines" : [ {
      "crowding" : {
        "trainLoadings" : [ {
          "naptanTo" : "aeiou",
          "line" : "aeiou",
          "timeSlice" : "aeiou",
          "platformDirection" : "aeiou",
          "value" : 123,
          "lineDirection" : "aeiou",
          "direction" : "aeiou"
        } ],
        "passengerFlows" : [ {
          "timeSlice" : "aeiou",
          "value" : 123
        } ]
      },
      "name" : "aeiou",
      "fullName" : "aeiou",
      "id" : "aeiou",
      "type" : "aeiou",
      "uri" : "aeiou"
    } ],
    "lat" : 1.3579000000000001069366817318950779736042022705078125,
    "stationId" : "aeiou",
    "direction" : "aeiou",
    "status" : true
  } ],
  "direction" : "aeiou"
}}, {contentType=application/xml, example=<null>
  <lineId>aeiou</lineId>
  <lineName>aeiou</lineName>
  <direction>aeiou</direction>
  <isOutboundOnly>true</isOutboundOnly>
  <mode>aeiou</mode>
  <lineStrings>aeiou</lineStrings>
</null>}]
     
     - parameter id: (path) A single line id e.g. victoria 
     - parameter direction: (path) The direction of travel. Can be inbound or outbound. 
     - parameter serviceTypes: (query) A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     - parameter excludeCrowding: (query) That excludes crowding from line disruptions. Can be true or false. (optional)

     - returns: RequestBuilder<RouteSequence> 
     */
    open class func lineRouteSequenceWithRequestBuilder(id: String, direction: Direction_lineRouteSequence, serviceTypes: [String]? = nil, excludeCrowding: Bool? = nil) -> RequestBuilder<RouteSequence> {
        var path = "/Line/{id}/Route/Sequence/{direction}"
        path = path.replacingOccurrences(of: "{id}", with: id.asParameter, options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{direction}", with: direction.rawValue.asParameter, options: .literal, range: nil)
        let URLString = RxTfLAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "serviceTypes": serviceTypes, 
            "excludeCrowding": excludeCrowding
        ])
        

        let requestBuilder: RequestBuilder<RouteSequence>.Type = RxTfLAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter serviceTypes
     */
    public enum ServiceTypes_lineSearch: String { 
        case regular = "Regular"
        case night = "Night"
    }

    /**
     Search for lines or routes matching the query string
     
     - parameter query: (path) Search term e.g victoria 
     - parameter modes: (query) Optionally filter by the specified modes (optional)
     - parameter serviceTypes: (query) A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func lineSearch(query: String, modes: [String]? = nil, serviceTypes: [String]? = nil, completion: @escaping ((_ data: RouteSearchResponse?,_ error: Error?) -> Void)) {
        lineSearchWithRequestBuilder(query: query, modes: modes, serviceTypes: serviceTypes).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Search for lines or routes matching the query string
     
     - parameter query: (path) Search term e.g victoria 
     - parameter modes: (query) Optionally filter by the specified modes (optional)
     - parameter serviceTypes: (query) A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     - returns: Observable<RouteSearchResponse>
     */
    open class func lineSearch(query: String, modes: [String]? = nil, serviceTypes: [String]? = nil) -> Observable<RouteSearchResponse> {
        return Observable.create { observer -> Disposable in
            lineSearch(query: query, modes: modes, serviceTypes: serviceTypes) { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Search for lines or routes matching the query string
     - GET /Line/Search/{query}
     - examples: [{contentType=application/json, example={
  "input" : "aeiou",
  "searchMatches" : [ {
    "mode" : "aeiou",
    "lineRouteSection" : [ {
      "toStation" : "aeiou",
      "serviceType" : "aeiou",
      "routeId" : 123,
      "destination" : "aeiou",
      "vehicleDestinationText" : "aeiou",
      "fromStation" : "aeiou",
      "direction" : "aeiou"
    } ],
    "matchedStops" : [ {
      "icsId" : "aeiou",
      "hasDisruption" : true,
      "modes" : [ "aeiou" ],
      "stopType" : "aeiou",
      "lon" : 1.3579000000000001069366817318950779736042022705078125,
      "towards" : "aeiou",
      "parentId" : "aeiou",
      "url" : "aeiou",
      "routeId" : 123,
      "zone" : "aeiou",
      "name" : "aeiou",
      "topMostParentId" : "aeiou",
      "stopLetter" : "aeiou",
      "id" : "aeiou",
      "accessibilitySummary" : "aeiou",
      "lines" : [ {
        "crowding" : {
          "trainLoadings" : [ {
            "naptanTo" : "aeiou",
            "line" : "aeiou",
            "timeSlice" : "aeiou",
            "platformDirection" : "aeiou",
            "value" : 123,
            "lineDirection" : "aeiou",
            "direction" : "aeiou"
          } ],
          "passengerFlows" : [ {
            "timeSlice" : "aeiou",
            "value" : 123
          } ]
        },
        "name" : "aeiou",
        "fullName" : "aeiou",
        "id" : "aeiou",
        "type" : "aeiou",
        "uri" : "aeiou"
      } ],
      "lat" : 1.3579000000000001069366817318950779736042022705078125,
      "stationId" : "aeiou",
      "direction" : "aeiou",
      "status" : true
    } ],
    "name" : "aeiou",
    "lineId" : "aeiou",
    "lineName" : "aeiou",
    "lon" : 1.3579000000000001069366817318950779736042022705078125,
    "id" : "aeiou",
    "matchedRouteSections" : [ {
      "id" : 123
    } ],
    "url" : "aeiou",
    "lat" : 1.3579000000000001069366817318950779736042022705078125
  } ]
}}, {contentType=application/xml, example=<null>
  <input>aeiou</input>
</null>}]
     - examples: [{contentType=application/json, example={
  "input" : "aeiou",
  "searchMatches" : [ {
    "mode" : "aeiou",
    "lineRouteSection" : [ {
      "toStation" : "aeiou",
      "serviceType" : "aeiou",
      "routeId" : 123,
      "destination" : "aeiou",
      "vehicleDestinationText" : "aeiou",
      "fromStation" : "aeiou",
      "direction" : "aeiou"
    } ],
    "matchedStops" : [ {
      "icsId" : "aeiou",
      "hasDisruption" : true,
      "modes" : [ "aeiou" ],
      "stopType" : "aeiou",
      "lon" : 1.3579000000000001069366817318950779736042022705078125,
      "towards" : "aeiou",
      "parentId" : "aeiou",
      "url" : "aeiou",
      "routeId" : 123,
      "zone" : "aeiou",
      "name" : "aeiou",
      "topMostParentId" : "aeiou",
      "stopLetter" : "aeiou",
      "id" : "aeiou",
      "accessibilitySummary" : "aeiou",
      "lines" : [ {
        "crowding" : {
          "trainLoadings" : [ {
            "naptanTo" : "aeiou",
            "line" : "aeiou",
            "timeSlice" : "aeiou",
            "platformDirection" : "aeiou",
            "value" : 123,
            "lineDirection" : "aeiou",
            "direction" : "aeiou"
          } ],
          "passengerFlows" : [ {
            "timeSlice" : "aeiou",
            "value" : 123
          } ]
        },
        "name" : "aeiou",
        "fullName" : "aeiou",
        "id" : "aeiou",
        "type" : "aeiou",
        "uri" : "aeiou"
      } ],
      "lat" : 1.3579000000000001069366817318950779736042022705078125,
      "stationId" : "aeiou",
      "direction" : "aeiou",
      "status" : true
    } ],
    "name" : "aeiou",
    "lineId" : "aeiou",
    "lineName" : "aeiou",
    "lon" : 1.3579000000000001069366817318950779736042022705078125,
    "id" : "aeiou",
    "matchedRouteSections" : [ {
      "id" : 123
    } ],
    "url" : "aeiou",
    "lat" : 1.3579000000000001069366817318950779736042022705078125
  } ]
}}, {contentType=application/xml, example=<null>
  <input>aeiou</input>
</null>}]
     
     - parameter query: (path) Search term e.g victoria 
     - parameter modes: (query) Optionally filter by the specified modes (optional)
     - parameter serviceTypes: (query) A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)

     - returns: RequestBuilder<RouteSearchResponse> 
     */
    open class func lineSearchWithRequestBuilder(query: String, modes: [String]? = nil, serviceTypes: [String]? = nil) -> RequestBuilder<RouteSearchResponse> {
        var path = "/Line/Search/{query}"
        path = path.replacingOccurrences(of: "{query}", with: query.asParameter, options: .literal, range: nil)
        let URLString = RxTfLAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "modes": modes, 
            "serviceTypes": serviceTypes
        ])
        

        let requestBuilder: RequestBuilder<RouteSearchResponse>.Type = RxTfLAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Gets the line status for given line ids during the provided dates e.g Minor Delays
     
     - parameter ids: (path) A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. 
     - parameter startDate: (query)  
     - parameter endDate: (query)  
     - parameter detail: (query) Include details of the disruptions that are causing the line status including the affected stops and routes (optional)
     - parameter dateRangeStartDate: (query)  (optional)
     - parameter dateRangeEndDate: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func lineStatus(ids: [String], startDate: String, endDate: String, detail: Bool? = nil, dateRangeStartDate: Date? = nil, dateRangeEndDate: Date? = nil, completion: @escaping ((_ data: [Line]?,_ error: Error?) -> Void)) {
        lineStatusWithRequestBuilder(ids: ids, startDate: startDate, endDate: endDate, detail: detail, dateRangeStartDate: dateRangeStartDate, dateRangeEndDate: dateRangeEndDate).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Gets the line status for given line ids during the provided dates e.g Minor Delays
     
     - parameter ids: (path) A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. 
     - parameter startDate: (query)  
     - parameter endDate: (query)  
     - parameter detail: (query) Include details of the disruptions that are causing the line status including the affected stops and routes (optional)
     - parameter dateRangeStartDate: (query)  (optional)
     - parameter dateRangeEndDate: (query)  (optional)
     - returns: Observable<[Line]>
     */
    open class func lineStatus(ids: [String], startDate: String, endDate: String, detail: Bool? = nil, dateRangeStartDate: Date? = nil, dateRangeEndDate: Date? = nil) -> Observable<[Line]> {
        return Observable.create { observer -> Disposable in
            lineStatus(ids: ids, startDate: startDate, endDate: endDate, detail: detail, dateRangeStartDate: dateRangeStartDate, dateRangeEndDate: dateRangeEndDate) { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Gets the line status for given line ids during the provided dates e.g Minor Delays
     - GET /Line/{ids}/Status/{startDate}/to/{endDate}
     - examples: [{contentType=application/json, example=[ {
  "routeSections" : [ {
    "routeCode" : "aeiou",
    "serviceType" : "aeiou",
    "originationName" : "aeiou",
    "destinationName" : "aeiou",
    "name" : "aeiou",
    "destination" : "aeiou",
    "originator" : "aeiou",
    "direction" : "aeiou"
  } ],
  "modeName" : "aeiou",
  "disruptions" : [ {
    "closureText" : "aeiou",
    "affectedRoutes" : [ {
      "routeCode" : "aeiou",
      "originationName" : "aeiou",
      "destinationName" : "aeiou",
      "routeSectionNaptanEntrySequence" : [ {
        "stopPoint" : {
          "indicator" : "aeiou",
          "commonName" : "aeiou",
          "modes" : [ "aeiou" ],
          "distance" : 1.3579000000000001069366817318950779736042022705078125,
          "smsCode" : "aeiou",
          "lon" : 1.3579000000000001069366817318950779736042022705078125,
          "children" : [ {
            "commonName" : "aeiou",
            "placeType" : "aeiou",
            "distance" : 1.3579000000000001069366817318950779736042022705078125,
            "children" : [ "" ],
            "childrenUrls" : [ "aeiou" ],
            "lon" : 1.3579000000000001069366817318950779736042022705078125,
            "id" : "aeiou",
            "additionalProperties" : [ "" ],
            "url" : "aeiou",
            "lat" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "hubNaptanCode" : "aeiou",
          "stopLetter" : "aeiou",
          "id" : "aeiou",
          "platformName" : "aeiou",
          "lines" : [ {
            "crowding" : {
              "trainLoadings" : [ {
                "naptanTo" : "aeiou",
                "line" : "aeiou",
                "timeSlice" : "aeiou",
                "platformDirection" : "aeiou",
                "value" : 123,
                "lineDirection" : "aeiou",
                "direction" : "aeiou"
              } ],
              "passengerFlows" : [ {
                "timeSlice" : "aeiou",
                "value" : 123
              } ]
            },
            "name" : "aeiou",
            "fullName" : "aeiou",
            "id" : "aeiou",
            "type" : "aeiou",
            "uri" : "aeiou"
          } ],
          "lat" : 1.3579000000000001069366817318950779736042022705078125,
          "lineModeGroups" : [ {
            "modeName" : "aeiou",
            "lineIdentifier" : [ "aeiou" ]
          } ],
          "childrenUrls" : [ "aeiou" ],
          "stationNaptan" : "aeiou",
          "fullName" : "aeiou",
          "stopType" : "aeiou",
          "naptanMode" : "aeiou",
          "url" : "aeiou",
          "placeType" : "aeiou",
          "naptanId" : "aeiou",
          "icsCode" : "aeiou",
          "lineGroup" : [ {
            "naptanIdReference" : "aeiou",
            "lineIdentifier" : [ "aeiou" ],
            "stationAtcoCode" : "aeiou"
          } ],
          "additionalProperties" : [ {
            "sourceSystemKey" : "aeiou",
            "modified" : "2000-01-23T04:56:07.000+00:00",
            "category" : "aeiou",
            "value" : "aeiou",
            "key" : "aeiou"
          } ],
          "accessibilitySummary" : "aeiou",
          "status" : true
        },
        "ordinal" : 123
      } ],
      "name" : "aeiou",
      "lineId" : "aeiou",
      "id" : "aeiou",
      "lineString" : "aeiou",
      "direction" : "aeiou"
    } ],
    "isBlocking" : true,
    "created" : "2000-01-23T04:56:07.000+00:00",
    "lastUpdate" : "2000-01-23T04:56:07.000+00:00",
    "additionalInfo" : "aeiou",
    "isWholeLine" : true,
    "description" : "aeiou",
    "affectedStops" : [ "" ],
    "category" : "aeiou",
    "type" : "aeiou",
    "categoryDescription" : "aeiou"
  } ],
  "lineStatuses" : [ {
    "statusSeverityDescription" : "aeiou",
    "reason" : "aeiou",
    "disruption" : "",
    "created" : "2000-01-23T04:56:07.000+00:00",
    "statusSeverity" : 123,
    "lineId" : "aeiou",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "validityPeriods" : [ {
      "fromDate" : "2000-01-23T04:56:07.000+00:00",
      "isNow" : true,
      "toDate" : "2000-01-23T04:56:07.000+00:00"
    } ],
    "id" : 123
  } ],
  "crowding" : "",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "name" : "aeiou",
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "serviceTypes" : [ {
    "name" : "aeiou",
    "uri" : "aeiou"
  } ],
  "id" : "aeiou"
} ]}, {contentType=application/xml, example=<null>
  <id>aeiou</id>
  <name>aeiou</name>
  <modeName>aeiou</modeName>
  <created>2000-01-23T04:56:07.000Z</created>
  <modified>2000-01-23T04:56:07.000Z</modified>
</null>}]
     - examples: [{contentType=application/json, example=[ {
  "routeSections" : [ {
    "routeCode" : "aeiou",
    "serviceType" : "aeiou",
    "originationName" : "aeiou",
    "destinationName" : "aeiou",
    "name" : "aeiou",
    "destination" : "aeiou",
    "originator" : "aeiou",
    "direction" : "aeiou"
  } ],
  "modeName" : "aeiou",
  "disruptions" : [ {
    "closureText" : "aeiou",
    "affectedRoutes" : [ {
      "routeCode" : "aeiou",
      "originationName" : "aeiou",
      "destinationName" : "aeiou",
      "routeSectionNaptanEntrySequence" : [ {
        "stopPoint" : {
          "indicator" : "aeiou",
          "commonName" : "aeiou",
          "modes" : [ "aeiou" ],
          "distance" : 1.3579000000000001069366817318950779736042022705078125,
          "smsCode" : "aeiou",
          "lon" : 1.3579000000000001069366817318950779736042022705078125,
          "children" : [ {
            "commonName" : "aeiou",
            "placeType" : "aeiou",
            "distance" : 1.3579000000000001069366817318950779736042022705078125,
            "children" : [ "" ],
            "childrenUrls" : [ "aeiou" ],
            "lon" : 1.3579000000000001069366817318950779736042022705078125,
            "id" : "aeiou",
            "additionalProperties" : [ "" ],
            "url" : "aeiou",
            "lat" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "hubNaptanCode" : "aeiou",
          "stopLetter" : "aeiou",
          "id" : "aeiou",
          "platformName" : "aeiou",
          "lines" : [ {
            "crowding" : {
              "trainLoadings" : [ {
                "naptanTo" : "aeiou",
                "line" : "aeiou",
                "timeSlice" : "aeiou",
                "platformDirection" : "aeiou",
                "value" : 123,
                "lineDirection" : "aeiou",
                "direction" : "aeiou"
              } ],
              "passengerFlows" : [ {
                "timeSlice" : "aeiou",
                "value" : 123
              } ]
            },
            "name" : "aeiou",
            "fullName" : "aeiou",
            "id" : "aeiou",
            "type" : "aeiou",
            "uri" : "aeiou"
          } ],
          "lat" : 1.3579000000000001069366817318950779736042022705078125,
          "lineModeGroups" : [ {
            "modeName" : "aeiou",
            "lineIdentifier" : [ "aeiou" ]
          } ],
          "childrenUrls" : [ "aeiou" ],
          "stationNaptan" : "aeiou",
          "fullName" : "aeiou",
          "stopType" : "aeiou",
          "naptanMode" : "aeiou",
          "url" : "aeiou",
          "placeType" : "aeiou",
          "naptanId" : "aeiou",
          "icsCode" : "aeiou",
          "lineGroup" : [ {
            "naptanIdReference" : "aeiou",
            "lineIdentifier" : [ "aeiou" ],
            "stationAtcoCode" : "aeiou"
          } ],
          "additionalProperties" : [ {
            "sourceSystemKey" : "aeiou",
            "modified" : "2000-01-23T04:56:07.000+00:00",
            "category" : "aeiou",
            "value" : "aeiou",
            "key" : "aeiou"
          } ],
          "accessibilitySummary" : "aeiou",
          "status" : true
        },
        "ordinal" : 123
      } ],
      "name" : "aeiou",
      "lineId" : "aeiou",
      "id" : "aeiou",
      "lineString" : "aeiou",
      "direction" : "aeiou"
    } ],
    "isBlocking" : true,
    "created" : "2000-01-23T04:56:07.000+00:00",
    "lastUpdate" : "2000-01-23T04:56:07.000+00:00",
    "additionalInfo" : "aeiou",
    "isWholeLine" : true,
    "description" : "aeiou",
    "affectedStops" : [ "" ],
    "category" : "aeiou",
    "type" : "aeiou",
    "categoryDescription" : "aeiou"
  } ],
  "lineStatuses" : [ {
    "statusSeverityDescription" : "aeiou",
    "reason" : "aeiou",
    "disruption" : "",
    "created" : "2000-01-23T04:56:07.000+00:00",
    "statusSeverity" : 123,
    "lineId" : "aeiou",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "validityPeriods" : [ {
      "fromDate" : "2000-01-23T04:56:07.000+00:00",
      "isNow" : true,
      "toDate" : "2000-01-23T04:56:07.000+00:00"
    } ],
    "id" : 123
  } ],
  "crowding" : "",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "name" : "aeiou",
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "serviceTypes" : [ {
    "name" : "aeiou",
    "uri" : "aeiou"
  } ],
  "id" : "aeiou"
} ]}, {contentType=application/xml, example=<null>
  <id>aeiou</id>
  <name>aeiou</name>
  <modeName>aeiou</modeName>
  <created>2000-01-23T04:56:07.000Z</created>
  <modified>2000-01-23T04:56:07.000Z</modified>
</null>}]
     
     - parameter ids: (path) A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. 
     - parameter startDate: (query)  
     - parameter endDate: (query)  
     - parameter detail: (query) Include details of the disruptions that are causing the line status including the affected stops and routes (optional)
     - parameter dateRangeStartDate: (query)  (optional)
     - parameter dateRangeEndDate: (query)  (optional)

     - returns: RequestBuilder<[Line]> 
     */
    open class func lineStatusWithRequestBuilder(ids: [String], startDate: String, endDate: String, detail: Bool? = nil, dateRangeStartDate: Date? = nil, dateRangeEndDate: Date? = nil) -> RequestBuilder<[Line]> {
        var path = "/Line/{ids}/Status/{startDate}/to/{endDate}"
        path = path.replacingOccurrences(of: "{ids}", with: ids.asParameter, options: .literal, range: nil)
        let URLString = RxTfLAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "detail": detail, 
            "startDate": startDate, 
            "endDate": endDate, 
            "dateRange.startDate": dateRangeStartDate?.encodeToJSON(), 
            "dateRange.endDate": dateRangeEndDate?.encodeToJSON()
        ])
        

        let requestBuilder: RequestBuilder<[Line]>.Type = RxTfLAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Gets the line status of for given line ids e.g Minor Delays
     
     - parameter ids: (path) A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. 
     - parameter detail: (query) Include details of the disruptions that are causing the line status including the affected stops and routes (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func lineStatusByIds(ids: [String], detail: Bool? = nil, completion: @escaping ((_ data: [Line]?,_ error: Error?) -> Void)) {
        lineStatusByIdsWithRequestBuilder(ids: ids, detail: detail).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Gets the line status of for given line ids e.g Minor Delays
     
     - parameter ids: (path) A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. 
     - parameter detail: (query) Include details of the disruptions that are causing the line status including the affected stops and routes (optional)
     - returns: Observable<[Line]>
     */
    open class func lineStatusByIds(ids: [String], detail: Bool? = nil) -> Observable<[Line]> {
        return Observable.create { observer -> Disposable in
            lineStatusByIds(ids: ids, detail: detail) { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Gets the line status of for given line ids e.g Minor Delays
     - GET /Line/{ids}/Status
     - examples: [{contentType=application/json, example=[ {
  "routeSections" : [ {
    "routeCode" : "aeiou",
    "serviceType" : "aeiou",
    "originationName" : "aeiou",
    "destinationName" : "aeiou",
    "name" : "aeiou",
    "destination" : "aeiou",
    "originator" : "aeiou",
    "direction" : "aeiou"
  } ],
  "modeName" : "aeiou",
  "disruptions" : [ {
    "closureText" : "aeiou",
    "affectedRoutes" : [ {
      "routeCode" : "aeiou",
      "originationName" : "aeiou",
      "destinationName" : "aeiou",
      "routeSectionNaptanEntrySequence" : [ {
        "stopPoint" : {
          "indicator" : "aeiou",
          "commonName" : "aeiou",
          "modes" : [ "aeiou" ],
          "distance" : 1.3579000000000001069366817318950779736042022705078125,
          "smsCode" : "aeiou",
          "lon" : 1.3579000000000001069366817318950779736042022705078125,
          "children" : [ {
            "commonName" : "aeiou",
            "placeType" : "aeiou",
            "distance" : 1.3579000000000001069366817318950779736042022705078125,
            "children" : [ "" ],
            "childrenUrls" : [ "aeiou" ],
            "lon" : 1.3579000000000001069366817318950779736042022705078125,
            "id" : "aeiou",
            "additionalProperties" : [ "" ],
            "url" : "aeiou",
            "lat" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "hubNaptanCode" : "aeiou",
          "stopLetter" : "aeiou",
          "id" : "aeiou",
          "platformName" : "aeiou",
          "lines" : [ {
            "crowding" : {
              "trainLoadings" : [ {
                "naptanTo" : "aeiou",
                "line" : "aeiou",
                "timeSlice" : "aeiou",
                "platformDirection" : "aeiou",
                "value" : 123,
                "lineDirection" : "aeiou",
                "direction" : "aeiou"
              } ],
              "passengerFlows" : [ {
                "timeSlice" : "aeiou",
                "value" : 123
              } ]
            },
            "name" : "aeiou",
            "fullName" : "aeiou",
            "id" : "aeiou",
            "type" : "aeiou",
            "uri" : "aeiou"
          } ],
          "lat" : 1.3579000000000001069366817318950779736042022705078125,
          "lineModeGroups" : [ {
            "modeName" : "aeiou",
            "lineIdentifier" : [ "aeiou" ]
          } ],
          "childrenUrls" : [ "aeiou" ],
          "stationNaptan" : "aeiou",
          "fullName" : "aeiou",
          "stopType" : "aeiou",
          "naptanMode" : "aeiou",
          "url" : "aeiou",
          "placeType" : "aeiou",
          "naptanId" : "aeiou",
          "icsCode" : "aeiou",
          "lineGroup" : [ {
            "naptanIdReference" : "aeiou",
            "lineIdentifier" : [ "aeiou" ],
            "stationAtcoCode" : "aeiou"
          } ],
          "additionalProperties" : [ {
            "sourceSystemKey" : "aeiou",
            "modified" : "2000-01-23T04:56:07.000+00:00",
            "category" : "aeiou",
            "value" : "aeiou",
            "key" : "aeiou"
          } ],
          "accessibilitySummary" : "aeiou",
          "status" : true
        },
        "ordinal" : 123
      } ],
      "name" : "aeiou",
      "lineId" : "aeiou",
      "id" : "aeiou",
      "lineString" : "aeiou",
      "direction" : "aeiou"
    } ],
    "isBlocking" : true,
    "created" : "2000-01-23T04:56:07.000+00:00",
    "lastUpdate" : "2000-01-23T04:56:07.000+00:00",
    "additionalInfo" : "aeiou",
    "isWholeLine" : true,
    "description" : "aeiou",
    "affectedStops" : [ "" ],
    "category" : "aeiou",
    "type" : "aeiou",
    "categoryDescription" : "aeiou"
  } ],
  "lineStatuses" : [ {
    "statusSeverityDescription" : "aeiou",
    "reason" : "aeiou",
    "disruption" : "",
    "created" : "2000-01-23T04:56:07.000+00:00",
    "statusSeverity" : 123,
    "lineId" : "aeiou",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "validityPeriods" : [ {
      "fromDate" : "2000-01-23T04:56:07.000+00:00",
      "isNow" : true,
      "toDate" : "2000-01-23T04:56:07.000+00:00"
    } ],
    "id" : 123
  } ],
  "crowding" : "",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "name" : "aeiou",
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "serviceTypes" : [ {
    "name" : "aeiou",
    "uri" : "aeiou"
  } ],
  "id" : "aeiou"
} ]}, {contentType=application/xml, example=<null>
  <id>aeiou</id>
  <name>aeiou</name>
  <modeName>aeiou</modeName>
  <created>2000-01-23T04:56:07.000Z</created>
  <modified>2000-01-23T04:56:07.000Z</modified>
</null>}]
     - examples: [{contentType=application/json, example=[ {
  "routeSections" : [ {
    "routeCode" : "aeiou",
    "serviceType" : "aeiou",
    "originationName" : "aeiou",
    "destinationName" : "aeiou",
    "name" : "aeiou",
    "destination" : "aeiou",
    "originator" : "aeiou",
    "direction" : "aeiou"
  } ],
  "modeName" : "aeiou",
  "disruptions" : [ {
    "closureText" : "aeiou",
    "affectedRoutes" : [ {
      "routeCode" : "aeiou",
      "originationName" : "aeiou",
      "destinationName" : "aeiou",
      "routeSectionNaptanEntrySequence" : [ {
        "stopPoint" : {
          "indicator" : "aeiou",
          "commonName" : "aeiou",
          "modes" : [ "aeiou" ],
          "distance" : 1.3579000000000001069366817318950779736042022705078125,
          "smsCode" : "aeiou",
          "lon" : 1.3579000000000001069366817318950779736042022705078125,
          "children" : [ {
            "commonName" : "aeiou",
            "placeType" : "aeiou",
            "distance" : 1.3579000000000001069366817318950779736042022705078125,
            "children" : [ "" ],
            "childrenUrls" : [ "aeiou" ],
            "lon" : 1.3579000000000001069366817318950779736042022705078125,
            "id" : "aeiou",
            "additionalProperties" : [ "" ],
            "url" : "aeiou",
            "lat" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "hubNaptanCode" : "aeiou",
          "stopLetter" : "aeiou",
          "id" : "aeiou",
          "platformName" : "aeiou",
          "lines" : [ {
            "crowding" : {
              "trainLoadings" : [ {
                "naptanTo" : "aeiou",
                "line" : "aeiou",
                "timeSlice" : "aeiou",
                "platformDirection" : "aeiou",
                "value" : 123,
                "lineDirection" : "aeiou",
                "direction" : "aeiou"
              } ],
              "passengerFlows" : [ {
                "timeSlice" : "aeiou",
                "value" : 123
              } ]
            },
            "name" : "aeiou",
            "fullName" : "aeiou",
            "id" : "aeiou",
            "type" : "aeiou",
            "uri" : "aeiou"
          } ],
          "lat" : 1.3579000000000001069366817318950779736042022705078125,
          "lineModeGroups" : [ {
            "modeName" : "aeiou",
            "lineIdentifier" : [ "aeiou" ]
          } ],
          "childrenUrls" : [ "aeiou" ],
          "stationNaptan" : "aeiou",
          "fullName" : "aeiou",
          "stopType" : "aeiou",
          "naptanMode" : "aeiou",
          "url" : "aeiou",
          "placeType" : "aeiou",
          "naptanId" : "aeiou",
          "icsCode" : "aeiou",
          "lineGroup" : [ {
            "naptanIdReference" : "aeiou",
            "lineIdentifier" : [ "aeiou" ],
            "stationAtcoCode" : "aeiou"
          } ],
          "additionalProperties" : [ {
            "sourceSystemKey" : "aeiou",
            "modified" : "2000-01-23T04:56:07.000+00:00",
            "category" : "aeiou",
            "value" : "aeiou",
            "key" : "aeiou"
          } ],
          "accessibilitySummary" : "aeiou",
          "status" : true
        },
        "ordinal" : 123
      } ],
      "name" : "aeiou",
      "lineId" : "aeiou",
      "id" : "aeiou",
      "lineString" : "aeiou",
      "direction" : "aeiou"
    } ],
    "isBlocking" : true,
    "created" : "2000-01-23T04:56:07.000+00:00",
    "lastUpdate" : "2000-01-23T04:56:07.000+00:00",
    "additionalInfo" : "aeiou",
    "isWholeLine" : true,
    "description" : "aeiou",
    "affectedStops" : [ "" ],
    "category" : "aeiou",
    "type" : "aeiou",
    "categoryDescription" : "aeiou"
  } ],
  "lineStatuses" : [ {
    "statusSeverityDescription" : "aeiou",
    "reason" : "aeiou",
    "disruption" : "",
    "created" : "2000-01-23T04:56:07.000+00:00",
    "statusSeverity" : 123,
    "lineId" : "aeiou",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "validityPeriods" : [ {
      "fromDate" : "2000-01-23T04:56:07.000+00:00",
      "isNow" : true,
      "toDate" : "2000-01-23T04:56:07.000+00:00"
    } ],
    "id" : 123
  } ],
  "crowding" : "",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "name" : "aeiou",
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "serviceTypes" : [ {
    "name" : "aeiou",
    "uri" : "aeiou"
  } ],
  "id" : "aeiou"
} ]}, {contentType=application/xml, example=<null>
  <id>aeiou</id>
  <name>aeiou</name>
  <modeName>aeiou</modeName>
  <created>2000-01-23T04:56:07.000Z</created>
  <modified>2000-01-23T04:56:07.000Z</modified>
</null>}]
     
     - parameter ids: (path) A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. 
     - parameter detail: (query) Include details of the disruptions that are causing the line status including the affected stops and routes (optional)

     - returns: RequestBuilder<[Line]> 
     */
    open class func lineStatusByIdsWithRequestBuilder(ids: [String], detail: Bool? = nil) -> RequestBuilder<[Line]> {
        var path = "/Line/{ids}/Status"
        path = path.replacingOccurrences(of: "{ids}", with: ids.asParameter, options: .literal, range: nil)
        let URLString = RxTfLAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "detail": detail
        ])
        

        let requestBuilder: RequestBuilder<[Line]>.Type = RxTfLAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Gets the line status of for all lines for the given modes
     
     - parameter modes: (path) A comma-separated list of modes to filter by. e.g. tube,dlr 
     - parameter detail: (query) Include details of the disruptions that are causing the line status including the affected stops and routes (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func lineStatusByMode(modes: [String], detail: Bool? = nil, completion: @escaping ((_ data: [Line]?,_ error: Error?) -> Void)) {
        lineStatusByModeWithRequestBuilder(modes: modes, detail: detail).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Gets the line status of for all lines for the given modes
     
     - parameter modes: (path) A comma-separated list of modes to filter by. e.g. tube,dlr 
     - parameter detail: (query) Include details of the disruptions that are causing the line status including the affected stops and routes (optional)
     - returns: Observable<[Line]>
     */
    open class func lineStatusByMode(modes: [String], detail: Bool? = nil) -> Observable<[Line]> {
        return Observable.create { observer -> Disposable in
            lineStatusByMode(modes: modes, detail: detail) { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Gets the line status of for all lines for the given modes
     - GET /Line/Mode/{modes}/Status
     - examples: [{contentType=application/json, example=[ {
  "routeSections" : [ {
    "routeCode" : "aeiou",
    "serviceType" : "aeiou",
    "originationName" : "aeiou",
    "destinationName" : "aeiou",
    "name" : "aeiou",
    "destination" : "aeiou",
    "originator" : "aeiou",
    "direction" : "aeiou"
  } ],
  "modeName" : "aeiou",
  "disruptions" : [ {
    "closureText" : "aeiou",
    "affectedRoutes" : [ {
      "routeCode" : "aeiou",
      "originationName" : "aeiou",
      "destinationName" : "aeiou",
      "routeSectionNaptanEntrySequence" : [ {
        "stopPoint" : {
          "indicator" : "aeiou",
          "commonName" : "aeiou",
          "modes" : [ "aeiou" ],
          "distance" : 1.3579000000000001069366817318950779736042022705078125,
          "smsCode" : "aeiou",
          "lon" : 1.3579000000000001069366817318950779736042022705078125,
          "children" : [ {
            "commonName" : "aeiou",
            "placeType" : "aeiou",
            "distance" : 1.3579000000000001069366817318950779736042022705078125,
            "children" : [ "" ],
            "childrenUrls" : [ "aeiou" ],
            "lon" : 1.3579000000000001069366817318950779736042022705078125,
            "id" : "aeiou",
            "additionalProperties" : [ "" ],
            "url" : "aeiou",
            "lat" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "hubNaptanCode" : "aeiou",
          "stopLetter" : "aeiou",
          "id" : "aeiou",
          "platformName" : "aeiou",
          "lines" : [ {
            "crowding" : {
              "trainLoadings" : [ {
                "naptanTo" : "aeiou",
                "line" : "aeiou",
                "timeSlice" : "aeiou",
                "platformDirection" : "aeiou",
                "value" : 123,
                "lineDirection" : "aeiou",
                "direction" : "aeiou"
              } ],
              "passengerFlows" : [ {
                "timeSlice" : "aeiou",
                "value" : 123
              } ]
            },
            "name" : "aeiou",
            "fullName" : "aeiou",
            "id" : "aeiou",
            "type" : "aeiou",
            "uri" : "aeiou"
          } ],
          "lat" : 1.3579000000000001069366817318950779736042022705078125,
          "lineModeGroups" : [ {
            "modeName" : "aeiou",
            "lineIdentifier" : [ "aeiou" ]
          } ],
          "childrenUrls" : [ "aeiou" ],
          "stationNaptan" : "aeiou",
          "fullName" : "aeiou",
          "stopType" : "aeiou",
          "naptanMode" : "aeiou",
          "url" : "aeiou",
          "placeType" : "aeiou",
          "naptanId" : "aeiou",
          "icsCode" : "aeiou",
          "lineGroup" : [ {
            "naptanIdReference" : "aeiou",
            "lineIdentifier" : [ "aeiou" ],
            "stationAtcoCode" : "aeiou"
          } ],
          "additionalProperties" : [ {
            "sourceSystemKey" : "aeiou",
            "modified" : "2000-01-23T04:56:07.000+00:00",
            "category" : "aeiou",
            "value" : "aeiou",
            "key" : "aeiou"
          } ],
          "accessibilitySummary" : "aeiou",
          "status" : true
        },
        "ordinal" : 123
      } ],
      "name" : "aeiou",
      "lineId" : "aeiou",
      "id" : "aeiou",
      "lineString" : "aeiou",
      "direction" : "aeiou"
    } ],
    "isBlocking" : true,
    "created" : "2000-01-23T04:56:07.000+00:00",
    "lastUpdate" : "2000-01-23T04:56:07.000+00:00",
    "additionalInfo" : "aeiou",
    "isWholeLine" : true,
    "description" : "aeiou",
    "affectedStops" : [ "" ],
    "category" : "aeiou",
    "type" : "aeiou",
    "categoryDescription" : "aeiou"
  } ],
  "lineStatuses" : [ {
    "statusSeverityDescription" : "aeiou",
    "reason" : "aeiou",
    "disruption" : "",
    "created" : "2000-01-23T04:56:07.000+00:00",
    "statusSeverity" : 123,
    "lineId" : "aeiou",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "validityPeriods" : [ {
      "fromDate" : "2000-01-23T04:56:07.000+00:00",
      "isNow" : true,
      "toDate" : "2000-01-23T04:56:07.000+00:00"
    } ],
    "id" : 123
  } ],
  "crowding" : "",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "name" : "aeiou",
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "serviceTypes" : [ {
    "name" : "aeiou",
    "uri" : "aeiou"
  } ],
  "id" : "aeiou"
} ]}, {contentType=application/xml, example=<null>
  <id>aeiou</id>
  <name>aeiou</name>
  <modeName>aeiou</modeName>
  <created>2000-01-23T04:56:07.000Z</created>
  <modified>2000-01-23T04:56:07.000Z</modified>
</null>}]
     - examples: [{contentType=application/json, example=[ {
  "routeSections" : [ {
    "routeCode" : "aeiou",
    "serviceType" : "aeiou",
    "originationName" : "aeiou",
    "destinationName" : "aeiou",
    "name" : "aeiou",
    "destination" : "aeiou",
    "originator" : "aeiou",
    "direction" : "aeiou"
  } ],
  "modeName" : "aeiou",
  "disruptions" : [ {
    "closureText" : "aeiou",
    "affectedRoutes" : [ {
      "routeCode" : "aeiou",
      "originationName" : "aeiou",
      "destinationName" : "aeiou",
      "routeSectionNaptanEntrySequence" : [ {
        "stopPoint" : {
          "indicator" : "aeiou",
          "commonName" : "aeiou",
          "modes" : [ "aeiou" ],
          "distance" : 1.3579000000000001069366817318950779736042022705078125,
          "smsCode" : "aeiou",
          "lon" : 1.3579000000000001069366817318950779736042022705078125,
          "children" : [ {
            "commonName" : "aeiou",
            "placeType" : "aeiou",
            "distance" : 1.3579000000000001069366817318950779736042022705078125,
            "children" : [ "" ],
            "childrenUrls" : [ "aeiou" ],
            "lon" : 1.3579000000000001069366817318950779736042022705078125,
            "id" : "aeiou",
            "additionalProperties" : [ "" ],
            "url" : "aeiou",
            "lat" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "hubNaptanCode" : "aeiou",
          "stopLetter" : "aeiou",
          "id" : "aeiou",
          "platformName" : "aeiou",
          "lines" : [ {
            "crowding" : {
              "trainLoadings" : [ {
                "naptanTo" : "aeiou",
                "line" : "aeiou",
                "timeSlice" : "aeiou",
                "platformDirection" : "aeiou",
                "value" : 123,
                "lineDirection" : "aeiou",
                "direction" : "aeiou"
              } ],
              "passengerFlows" : [ {
                "timeSlice" : "aeiou",
                "value" : 123
              } ]
            },
            "name" : "aeiou",
            "fullName" : "aeiou",
            "id" : "aeiou",
            "type" : "aeiou",
            "uri" : "aeiou"
          } ],
          "lat" : 1.3579000000000001069366817318950779736042022705078125,
          "lineModeGroups" : [ {
            "modeName" : "aeiou",
            "lineIdentifier" : [ "aeiou" ]
          } ],
          "childrenUrls" : [ "aeiou" ],
          "stationNaptan" : "aeiou",
          "fullName" : "aeiou",
          "stopType" : "aeiou",
          "naptanMode" : "aeiou",
          "url" : "aeiou",
          "placeType" : "aeiou",
          "naptanId" : "aeiou",
          "icsCode" : "aeiou",
          "lineGroup" : [ {
            "naptanIdReference" : "aeiou",
            "lineIdentifier" : [ "aeiou" ],
            "stationAtcoCode" : "aeiou"
          } ],
          "additionalProperties" : [ {
            "sourceSystemKey" : "aeiou",
            "modified" : "2000-01-23T04:56:07.000+00:00",
            "category" : "aeiou",
            "value" : "aeiou",
            "key" : "aeiou"
          } ],
          "accessibilitySummary" : "aeiou",
          "status" : true
        },
        "ordinal" : 123
      } ],
      "name" : "aeiou",
      "lineId" : "aeiou",
      "id" : "aeiou",
      "lineString" : "aeiou",
      "direction" : "aeiou"
    } ],
    "isBlocking" : true,
    "created" : "2000-01-23T04:56:07.000+00:00",
    "lastUpdate" : "2000-01-23T04:56:07.000+00:00",
    "additionalInfo" : "aeiou",
    "isWholeLine" : true,
    "description" : "aeiou",
    "affectedStops" : [ "" ],
    "category" : "aeiou",
    "type" : "aeiou",
    "categoryDescription" : "aeiou"
  } ],
  "lineStatuses" : [ {
    "statusSeverityDescription" : "aeiou",
    "reason" : "aeiou",
    "disruption" : "",
    "created" : "2000-01-23T04:56:07.000+00:00",
    "statusSeverity" : 123,
    "lineId" : "aeiou",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "validityPeriods" : [ {
      "fromDate" : "2000-01-23T04:56:07.000+00:00",
      "isNow" : true,
      "toDate" : "2000-01-23T04:56:07.000+00:00"
    } ],
    "id" : 123
  } ],
  "crowding" : "",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "name" : "aeiou",
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "serviceTypes" : [ {
    "name" : "aeiou",
    "uri" : "aeiou"
  } ],
  "id" : "aeiou"
} ]}, {contentType=application/xml, example=<null>
  <id>aeiou</id>
  <name>aeiou</name>
  <modeName>aeiou</modeName>
  <created>2000-01-23T04:56:07.000Z</created>
  <modified>2000-01-23T04:56:07.000Z</modified>
</null>}]
     
     - parameter modes: (path) A comma-separated list of modes to filter by. e.g. tube,dlr 
     - parameter detail: (query) Include details of the disruptions that are causing the line status including the affected stops and routes (optional)

     - returns: RequestBuilder<[Line]> 
     */
    open class func lineStatusByModeWithRequestBuilder(modes: [String], detail: Bool? = nil) -> RequestBuilder<[Line]> {
        var path = "/Line/Mode/{modes}/Status"
        path = path.replacingOccurrences(of: "{modes}", with: modes.asParameter, options: .literal, range: nil)
        let URLString = RxTfLAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "detail": detail
        ])
        

        let requestBuilder: RequestBuilder<[Line]>.Type = RxTfLAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Gets the line status for all lines with a given severity              A list of valid severity codes can be obtained from a call to Line/Meta/Severity
     
     - parameter severity: (path) The level of severity (eg: a number from 0 to 14) 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func lineStatusBySeverity(severity: Int32, completion: @escaping ((_ data: [Line]?,_ error: Error?) -> Void)) {
        lineStatusBySeverityWithRequestBuilder(severity: severity).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Gets the line status for all lines with a given severity              A list of valid severity codes can be obtained from a call to Line/Meta/Severity
     
     - parameter severity: (path) The level of severity (eg: a number from 0 to 14) 
     - returns: Observable<[Line]>
     */
    open class func lineStatusBySeverity(severity: Int32) -> Observable<[Line]> {
        return Observable.create { observer -> Disposable in
            lineStatusBySeverity(severity: severity) { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Gets the line status for all lines with a given severity              A list of valid severity codes can be obtained from a call to Line/Meta/Severity
     - GET /Line/Status/{severity}
     - examples: [{contentType=application/json, example=[ {
  "routeSections" : [ {
    "routeCode" : "aeiou",
    "serviceType" : "aeiou",
    "originationName" : "aeiou",
    "destinationName" : "aeiou",
    "name" : "aeiou",
    "destination" : "aeiou",
    "originator" : "aeiou",
    "direction" : "aeiou"
  } ],
  "modeName" : "aeiou",
  "disruptions" : [ {
    "closureText" : "aeiou",
    "affectedRoutes" : [ {
      "routeCode" : "aeiou",
      "originationName" : "aeiou",
      "destinationName" : "aeiou",
      "routeSectionNaptanEntrySequence" : [ {
        "stopPoint" : {
          "indicator" : "aeiou",
          "commonName" : "aeiou",
          "modes" : [ "aeiou" ],
          "distance" : 1.3579000000000001069366817318950779736042022705078125,
          "smsCode" : "aeiou",
          "lon" : 1.3579000000000001069366817318950779736042022705078125,
          "children" : [ {
            "commonName" : "aeiou",
            "placeType" : "aeiou",
            "distance" : 1.3579000000000001069366817318950779736042022705078125,
            "children" : [ "" ],
            "childrenUrls" : [ "aeiou" ],
            "lon" : 1.3579000000000001069366817318950779736042022705078125,
            "id" : "aeiou",
            "additionalProperties" : [ "" ],
            "url" : "aeiou",
            "lat" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "hubNaptanCode" : "aeiou",
          "stopLetter" : "aeiou",
          "id" : "aeiou",
          "platformName" : "aeiou",
          "lines" : [ {
            "crowding" : {
              "trainLoadings" : [ {
                "naptanTo" : "aeiou",
                "line" : "aeiou",
                "timeSlice" : "aeiou",
                "platformDirection" : "aeiou",
                "value" : 123,
                "lineDirection" : "aeiou",
                "direction" : "aeiou"
              } ],
              "passengerFlows" : [ {
                "timeSlice" : "aeiou",
                "value" : 123
              } ]
            },
            "name" : "aeiou",
            "fullName" : "aeiou",
            "id" : "aeiou",
            "type" : "aeiou",
            "uri" : "aeiou"
          } ],
          "lat" : 1.3579000000000001069366817318950779736042022705078125,
          "lineModeGroups" : [ {
            "modeName" : "aeiou",
            "lineIdentifier" : [ "aeiou" ]
          } ],
          "childrenUrls" : [ "aeiou" ],
          "stationNaptan" : "aeiou",
          "fullName" : "aeiou",
          "stopType" : "aeiou",
          "naptanMode" : "aeiou",
          "url" : "aeiou",
          "placeType" : "aeiou",
          "naptanId" : "aeiou",
          "icsCode" : "aeiou",
          "lineGroup" : [ {
            "naptanIdReference" : "aeiou",
            "lineIdentifier" : [ "aeiou" ],
            "stationAtcoCode" : "aeiou"
          } ],
          "additionalProperties" : [ {
            "sourceSystemKey" : "aeiou",
            "modified" : "2000-01-23T04:56:07.000+00:00",
            "category" : "aeiou",
            "value" : "aeiou",
            "key" : "aeiou"
          } ],
          "accessibilitySummary" : "aeiou",
          "status" : true
        },
        "ordinal" : 123
      } ],
      "name" : "aeiou",
      "lineId" : "aeiou",
      "id" : "aeiou",
      "lineString" : "aeiou",
      "direction" : "aeiou"
    } ],
    "isBlocking" : true,
    "created" : "2000-01-23T04:56:07.000+00:00",
    "lastUpdate" : "2000-01-23T04:56:07.000+00:00",
    "additionalInfo" : "aeiou",
    "isWholeLine" : true,
    "description" : "aeiou",
    "affectedStops" : [ "" ],
    "category" : "aeiou",
    "type" : "aeiou",
    "categoryDescription" : "aeiou"
  } ],
  "lineStatuses" : [ {
    "statusSeverityDescription" : "aeiou",
    "reason" : "aeiou",
    "disruption" : "",
    "created" : "2000-01-23T04:56:07.000+00:00",
    "statusSeverity" : 123,
    "lineId" : "aeiou",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "validityPeriods" : [ {
      "fromDate" : "2000-01-23T04:56:07.000+00:00",
      "isNow" : true,
      "toDate" : "2000-01-23T04:56:07.000+00:00"
    } ],
    "id" : 123
  } ],
  "crowding" : "",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "name" : "aeiou",
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "serviceTypes" : [ {
    "name" : "aeiou",
    "uri" : "aeiou"
  } ],
  "id" : "aeiou"
} ]}, {contentType=application/xml, example=<null>
  <id>aeiou</id>
  <name>aeiou</name>
  <modeName>aeiou</modeName>
  <created>2000-01-23T04:56:07.000Z</created>
  <modified>2000-01-23T04:56:07.000Z</modified>
</null>}]
     - examples: [{contentType=application/json, example=[ {
  "routeSections" : [ {
    "routeCode" : "aeiou",
    "serviceType" : "aeiou",
    "originationName" : "aeiou",
    "destinationName" : "aeiou",
    "name" : "aeiou",
    "destination" : "aeiou",
    "originator" : "aeiou",
    "direction" : "aeiou"
  } ],
  "modeName" : "aeiou",
  "disruptions" : [ {
    "closureText" : "aeiou",
    "affectedRoutes" : [ {
      "routeCode" : "aeiou",
      "originationName" : "aeiou",
      "destinationName" : "aeiou",
      "routeSectionNaptanEntrySequence" : [ {
        "stopPoint" : {
          "indicator" : "aeiou",
          "commonName" : "aeiou",
          "modes" : [ "aeiou" ],
          "distance" : 1.3579000000000001069366817318950779736042022705078125,
          "smsCode" : "aeiou",
          "lon" : 1.3579000000000001069366817318950779736042022705078125,
          "children" : [ {
            "commonName" : "aeiou",
            "placeType" : "aeiou",
            "distance" : 1.3579000000000001069366817318950779736042022705078125,
            "children" : [ "" ],
            "childrenUrls" : [ "aeiou" ],
            "lon" : 1.3579000000000001069366817318950779736042022705078125,
            "id" : "aeiou",
            "additionalProperties" : [ "" ],
            "url" : "aeiou",
            "lat" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "hubNaptanCode" : "aeiou",
          "stopLetter" : "aeiou",
          "id" : "aeiou",
          "platformName" : "aeiou",
          "lines" : [ {
            "crowding" : {
              "trainLoadings" : [ {
                "naptanTo" : "aeiou",
                "line" : "aeiou",
                "timeSlice" : "aeiou",
                "platformDirection" : "aeiou",
                "value" : 123,
                "lineDirection" : "aeiou",
                "direction" : "aeiou"
              } ],
              "passengerFlows" : [ {
                "timeSlice" : "aeiou",
                "value" : 123
              } ]
            },
            "name" : "aeiou",
            "fullName" : "aeiou",
            "id" : "aeiou",
            "type" : "aeiou",
            "uri" : "aeiou"
          } ],
          "lat" : 1.3579000000000001069366817318950779736042022705078125,
          "lineModeGroups" : [ {
            "modeName" : "aeiou",
            "lineIdentifier" : [ "aeiou" ]
          } ],
          "childrenUrls" : [ "aeiou" ],
          "stationNaptan" : "aeiou",
          "fullName" : "aeiou",
          "stopType" : "aeiou",
          "naptanMode" : "aeiou",
          "url" : "aeiou",
          "placeType" : "aeiou",
          "naptanId" : "aeiou",
          "icsCode" : "aeiou",
          "lineGroup" : [ {
            "naptanIdReference" : "aeiou",
            "lineIdentifier" : [ "aeiou" ],
            "stationAtcoCode" : "aeiou"
          } ],
          "additionalProperties" : [ {
            "sourceSystemKey" : "aeiou",
            "modified" : "2000-01-23T04:56:07.000+00:00",
            "category" : "aeiou",
            "value" : "aeiou",
            "key" : "aeiou"
          } ],
          "accessibilitySummary" : "aeiou",
          "status" : true
        },
        "ordinal" : 123
      } ],
      "name" : "aeiou",
      "lineId" : "aeiou",
      "id" : "aeiou",
      "lineString" : "aeiou",
      "direction" : "aeiou"
    } ],
    "isBlocking" : true,
    "created" : "2000-01-23T04:56:07.000+00:00",
    "lastUpdate" : "2000-01-23T04:56:07.000+00:00",
    "additionalInfo" : "aeiou",
    "isWholeLine" : true,
    "description" : "aeiou",
    "affectedStops" : [ "" ],
    "category" : "aeiou",
    "type" : "aeiou",
    "categoryDescription" : "aeiou"
  } ],
  "lineStatuses" : [ {
    "statusSeverityDescription" : "aeiou",
    "reason" : "aeiou",
    "disruption" : "",
    "created" : "2000-01-23T04:56:07.000+00:00",
    "statusSeverity" : 123,
    "lineId" : "aeiou",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "validityPeriods" : [ {
      "fromDate" : "2000-01-23T04:56:07.000+00:00",
      "isNow" : true,
      "toDate" : "2000-01-23T04:56:07.000+00:00"
    } ],
    "id" : 123
  } ],
  "crowding" : "",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "name" : "aeiou",
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "serviceTypes" : [ {
    "name" : "aeiou",
    "uri" : "aeiou"
  } ],
  "id" : "aeiou"
} ]}, {contentType=application/xml, example=<null>
  <id>aeiou</id>
  <name>aeiou</name>
  <modeName>aeiou</modeName>
  <created>2000-01-23T04:56:07.000Z</created>
  <modified>2000-01-23T04:56:07.000Z</modified>
</null>}]
     
     - parameter severity: (path) The level of severity (eg: a number from 0 to 14) 

     - returns: RequestBuilder<[Line]> 
     */
    open class func lineStatusBySeverityWithRequestBuilder(severity: Int32) -> RequestBuilder<[Line]> {
        var path = "/Line/Status/{severity}"
        path = path.replacingOccurrences(of: "{severity}", with: severity.asParameter, options: .literal, range: nil)
        let URLString = RxTfLAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[Line]>.Type = RxTfLAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Gets a list of the stations that serve the given line id
     
     - parameter id: (path) A single line id e.g. victoria 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func lineStopPoints(id: String, completion: @escaping ((_ data: [StopPoint]?,_ error: Error?) -> Void)) {
        lineStopPointsWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Gets a list of the stations that serve the given line id
     
     - parameter id: (path) A single line id e.g. victoria 
     - returns: Observable<[StopPoint]>
     */
    open class func lineStopPoints(id: String) -> Observable<[StopPoint]> {
        return Observable.create { observer -> Disposable in
            lineStopPoints(id: id) { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Gets a list of the stations that serve the given line id
     - GET /Line/{id}/StopPoints
     - examples: [{contentType=application/json, example=[ {
  "indicator" : "aeiou",
  "commonName" : "aeiou",
  "modes" : [ "aeiou" ],
  "distance" : 1.3579000000000001069366817318950779736042022705078125,
  "smsCode" : "aeiou",
  "lon" : 1.3579000000000001069366817318950779736042022705078125,
  "children" : [ {
    "commonName" : "aeiou",
    "placeType" : "aeiou",
    "distance" : 1.3579000000000001069366817318950779736042022705078125,
    "children" : [ "" ],
    "childrenUrls" : [ "aeiou" ],
    "lon" : 1.3579000000000001069366817318950779736042022705078125,
    "id" : "aeiou",
    "additionalProperties" : [ "" ],
    "url" : "aeiou",
    "lat" : 1.3579000000000001069366817318950779736042022705078125
  } ],
  "hubNaptanCode" : "aeiou",
  "stopLetter" : "aeiou",
  "id" : "aeiou",
  "platformName" : "aeiou",
  "lines" : [ {
    "crowding" : {
      "trainLoadings" : [ {
        "naptanTo" : "aeiou",
        "line" : "aeiou",
        "timeSlice" : "aeiou",
        "platformDirection" : "aeiou",
        "value" : 123,
        "lineDirection" : "aeiou",
        "direction" : "aeiou"
      } ],
      "passengerFlows" : [ {
        "timeSlice" : "aeiou",
        "value" : 123
      } ]
    },
    "name" : "aeiou",
    "fullName" : "aeiou",
    "id" : "aeiou",
    "type" : "aeiou",
    "uri" : "aeiou"
  } ],
  "lat" : 1.3579000000000001069366817318950779736042022705078125,
  "lineModeGroups" : [ {
    "modeName" : "aeiou",
    "lineIdentifier" : [ "aeiou" ]
  } ],
  "childrenUrls" : [ "aeiou" ],
  "stationNaptan" : "aeiou",
  "fullName" : "aeiou",
  "stopType" : "aeiou",
  "naptanMode" : "aeiou",
  "url" : "aeiou",
  "placeType" : "aeiou",
  "naptanId" : "aeiou",
  "icsCode" : "aeiou",
  "lineGroup" : [ {
    "naptanIdReference" : "aeiou",
    "lineIdentifier" : [ "aeiou" ],
    "stationAtcoCode" : "aeiou"
  } ],
  "additionalProperties" : [ {
    "sourceSystemKey" : "aeiou",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "category" : "aeiou",
    "value" : "aeiou",
    "key" : "aeiou"
  } ],
  "accessibilitySummary" : "aeiou",
  "status" : true
} ]}, {contentType=application/xml, example=<null>
  <naptanId>aeiou</naptanId>
  <platformName>aeiou</platformName>
  <indicator>aeiou</indicator>
  <stopLetter>aeiou</stopLetter>
  <modes>aeiou</modes>
  <icsCode>aeiou</icsCode>
  <smsCode>aeiou</smsCode>
  <stopType>aeiou</stopType>
  <stationNaptan>aeiou</stationNaptan>
  <accessibilitySummary>aeiou</accessibilitySummary>
  <hubNaptanCode>aeiou</hubNaptanCode>
  <fullName>aeiou</fullName>
  <naptanMode>aeiou</naptanMode>
  <status>true</status>
  <id>aeiou</id>
  <url>aeiou</url>
  <commonName>aeiou</commonName>
  <distance>3.149</distance>
  <placeType>aeiou</placeType>
  <childrenUrls>aeiou</childrenUrls>
  <lat>3.149</lat>
  <lon>3.149</lon>
</null>}]
     - examples: [{contentType=application/json, example=[ {
  "indicator" : "aeiou",
  "commonName" : "aeiou",
  "modes" : [ "aeiou" ],
  "distance" : 1.3579000000000001069366817318950779736042022705078125,
  "smsCode" : "aeiou",
  "lon" : 1.3579000000000001069366817318950779736042022705078125,
  "children" : [ {
    "commonName" : "aeiou",
    "placeType" : "aeiou",
    "distance" : 1.3579000000000001069366817318950779736042022705078125,
    "children" : [ "" ],
    "childrenUrls" : [ "aeiou" ],
    "lon" : 1.3579000000000001069366817318950779736042022705078125,
    "id" : "aeiou",
    "additionalProperties" : [ "" ],
    "url" : "aeiou",
    "lat" : 1.3579000000000001069366817318950779736042022705078125
  } ],
  "hubNaptanCode" : "aeiou",
  "stopLetter" : "aeiou",
  "id" : "aeiou",
  "platformName" : "aeiou",
  "lines" : [ {
    "crowding" : {
      "trainLoadings" : [ {
        "naptanTo" : "aeiou",
        "line" : "aeiou",
        "timeSlice" : "aeiou",
        "platformDirection" : "aeiou",
        "value" : 123,
        "lineDirection" : "aeiou",
        "direction" : "aeiou"
      } ],
      "passengerFlows" : [ {
        "timeSlice" : "aeiou",
        "value" : 123
      } ]
    },
    "name" : "aeiou",
    "fullName" : "aeiou",
    "id" : "aeiou",
    "type" : "aeiou",
    "uri" : "aeiou"
  } ],
  "lat" : 1.3579000000000001069366817318950779736042022705078125,
  "lineModeGroups" : [ {
    "modeName" : "aeiou",
    "lineIdentifier" : [ "aeiou" ]
  } ],
  "childrenUrls" : [ "aeiou" ],
  "stationNaptan" : "aeiou",
  "fullName" : "aeiou",
  "stopType" : "aeiou",
  "naptanMode" : "aeiou",
  "url" : "aeiou",
  "placeType" : "aeiou",
  "naptanId" : "aeiou",
  "icsCode" : "aeiou",
  "lineGroup" : [ {
    "naptanIdReference" : "aeiou",
    "lineIdentifier" : [ "aeiou" ],
    "stationAtcoCode" : "aeiou"
  } ],
  "additionalProperties" : [ {
    "sourceSystemKey" : "aeiou",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "category" : "aeiou",
    "value" : "aeiou",
    "key" : "aeiou"
  } ],
  "accessibilitySummary" : "aeiou",
  "status" : true
} ]}, {contentType=application/xml, example=<null>
  <naptanId>aeiou</naptanId>
  <platformName>aeiou</platformName>
  <indicator>aeiou</indicator>
  <stopLetter>aeiou</stopLetter>
  <modes>aeiou</modes>
  <icsCode>aeiou</icsCode>
  <smsCode>aeiou</smsCode>
  <stopType>aeiou</stopType>
  <stationNaptan>aeiou</stationNaptan>
  <accessibilitySummary>aeiou</accessibilitySummary>
  <hubNaptanCode>aeiou</hubNaptanCode>
  <fullName>aeiou</fullName>
  <naptanMode>aeiou</naptanMode>
  <status>true</status>
  <id>aeiou</id>
  <url>aeiou</url>
  <commonName>aeiou</commonName>
  <distance>3.149</distance>
  <placeType>aeiou</placeType>
  <childrenUrls>aeiou</childrenUrls>
  <lat>3.149</lat>
  <lon>3.149</lon>
</null>}]
     
     - parameter id: (path) A single line id e.g. victoria 

     - returns: RequestBuilder<[StopPoint]> 
     */
    open class func lineStopPointsWithRequestBuilder(id: String) -> RequestBuilder<[StopPoint]> {
        var path = "/Line/{id}/StopPoints"
        path = path.replacingOccurrences(of: "{id}", with: id.asParameter, options: .literal, range: nil)
        let URLString = RxTfLAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[StopPoint]>.Type = RxTfLAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Gets the timetable for a specified station on the give line
     
     - parameter fromStopPointId: (path) The originating station&#39;s stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) 
     - parameter id: (path) A single line id e.g. victoria 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func lineTimetable(fromStopPointId: String, id: String, completion: @escaping ((_ data: TimetableResponse?,_ error: Error?) -> Void)) {
        lineTimetableWithRequestBuilder(fromStopPointId: fromStopPointId, id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Gets the timetable for a specified station on the give line
     
     - parameter fromStopPointId: (path) The originating station&#39;s stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) 
     - parameter id: (path) A single line id e.g. victoria 
     - returns: Observable<TimetableResponse>
     */
    open class func lineTimetable(fromStopPointId: String, id: String) -> Observable<TimetableResponse> {
        return Observable.create { observer -> Disposable in
            lineTimetable(fromStopPointId: fromStopPointId, id: id) { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Gets the timetable for a specified station on the give line
     - GET /Line/{id}/Timetable/{fromStopPointId}
     - examples: [{contentType=application/json, example={
  "pdfUrl" : "aeiou",
  "disambiguation" : {
    "disambiguationOptions" : [ {
      "description" : "aeiou",
      "uri" : "aeiou"
    } ]
  },
  "lineId" : "aeiou",
  "lineName" : "aeiou",
  "stations" : [ {
    "icsId" : "aeiou",
    "hasDisruption" : true,
    "modes" : [ "aeiou" ],
    "stopType" : "aeiou",
    "lon" : 1.3579000000000001069366817318950779736042022705078125,
    "towards" : "aeiou",
    "parentId" : "aeiou",
    "url" : "aeiou",
    "routeId" : 123,
    "zone" : "aeiou",
    "name" : "aeiou",
    "topMostParentId" : "aeiou",
    "stopLetter" : "aeiou",
    "id" : "aeiou",
    "accessibilitySummary" : "aeiou",
    "lines" : [ {
      "crowding" : {
        "trainLoadings" : [ {
          "naptanTo" : "aeiou",
          "line" : "aeiou",
          "timeSlice" : "aeiou",
          "platformDirection" : "aeiou",
          "value" : 123,
          "lineDirection" : "aeiou",
          "direction" : "aeiou"
        } ],
        "passengerFlows" : [ {
          "timeSlice" : "aeiou",
          "value" : 123
        } ]
      },
      "name" : "aeiou",
      "fullName" : "aeiou",
      "id" : "aeiou",
      "type" : "aeiou",
      "uri" : "aeiou"
    } ],
    "lat" : 1.3579000000000001069366817318950779736042022705078125,
    "stationId" : "aeiou",
    "direction" : "aeiou",
    "status" : true
  } ],
  "stops" : [ "" ],
  "direction" : "aeiou",
  "timetable" : {
    "routes" : [ {
      "stationIntervals" : [ {
        "intervals" : [ {
          "timeToArrival" : 1.3579000000000001069366817318950779736042022705078125,
          "stopId" : "aeiou"
        } ],
        "id" : "aeiou"
      } ],
      "schedules" : [ {
        "name" : "aeiou",
        "lastJourney" : "",
        "periods" : [ {
          "fromTime" : {
            "hour" : "aeiou",
            "minute" : "aeiou"
          },
          "type" : "aeiou",
          "toTime" : "",
          "frequency" : {
            "lowestFrequency" : 1.3579000000000001069366817318950779736042022705078125,
            "highestFrequency" : 1.3579000000000001069366817318950779736042022705078125
          }
        } ],
        "firstJourney" : "",
        "knownJourneys" : [ {
          "hour" : "aeiou",
          "intervalId" : 123,
          "minute" : "aeiou"
        } ]
      } ]
    } ],
    "departureStopId" : "aeiou"
  },
  "statusErrorMessage" : "aeiou"
}}, {contentType=application/xml, example=<null>
  <lineId>aeiou</lineId>
  <lineName>aeiou</lineName>
  <direction>aeiou</direction>
  <pdfUrl>aeiou</pdfUrl>
  <statusErrorMessage>aeiou</statusErrorMessage>
</null>}]
     - examples: [{contentType=application/json, example={
  "pdfUrl" : "aeiou",
  "disambiguation" : {
    "disambiguationOptions" : [ {
      "description" : "aeiou",
      "uri" : "aeiou"
    } ]
  },
  "lineId" : "aeiou",
  "lineName" : "aeiou",
  "stations" : [ {
    "icsId" : "aeiou",
    "hasDisruption" : true,
    "modes" : [ "aeiou" ],
    "stopType" : "aeiou",
    "lon" : 1.3579000000000001069366817318950779736042022705078125,
    "towards" : "aeiou",
    "parentId" : "aeiou",
    "url" : "aeiou",
    "routeId" : 123,
    "zone" : "aeiou",
    "name" : "aeiou",
    "topMostParentId" : "aeiou",
    "stopLetter" : "aeiou",
    "id" : "aeiou",
    "accessibilitySummary" : "aeiou",
    "lines" : [ {
      "crowding" : {
        "trainLoadings" : [ {
          "naptanTo" : "aeiou",
          "line" : "aeiou",
          "timeSlice" : "aeiou",
          "platformDirection" : "aeiou",
          "value" : 123,
          "lineDirection" : "aeiou",
          "direction" : "aeiou"
        } ],
        "passengerFlows" : [ {
          "timeSlice" : "aeiou",
          "value" : 123
        } ]
      },
      "name" : "aeiou",
      "fullName" : "aeiou",
      "id" : "aeiou",
      "type" : "aeiou",
      "uri" : "aeiou"
    } ],
    "lat" : 1.3579000000000001069366817318950779736042022705078125,
    "stationId" : "aeiou",
    "direction" : "aeiou",
    "status" : true
  } ],
  "stops" : [ "" ],
  "direction" : "aeiou",
  "timetable" : {
    "routes" : [ {
      "stationIntervals" : [ {
        "intervals" : [ {
          "timeToArrival" : 1.3579000000000001069366817318950779736042022705078125,
          "stopId" : "aeiou"
        } ],
        "id" : "aeiou"
      } ],
      "schedules" : [ {
        "name" : "aeiou",
        "lastJourney" : "",
        "periods" : [ {
          "fromTime" : {
            "hour" : "aeiou",
            "minute" : "aeiou"
          },
          "type" : "aeiou",
          "toTime" : "",
          "frequency" : {
            "lowestFrequency" : 1.3579000000000001069366817318950779736042022705078125,
            "highestFrequency" : 1.3579000000000001069366817318950779736042022705078125
          }
        } ],
        "firstJourney" : "",
        "knownJourneys" : [ {
          "hour" : "aeiou",
          "intervalId" : 123,
          "minute" : "aeiou"
        } ]
      } ]
    } ],
    "departureStopId" : "aeiou"
  },
  "statusErrorMessage" : "aeiou"
}}, {contentType=application/xml, example=<null>
  <lineId>aeiou</lineId>
  <lineName>aeiou</lineName>
  <direction>aeiou</direction>
  <pdfUrl>aeiou</pdfUrl>
  <statusErrorMessage>aeiou</statusErrorMessage>
</null>}]
     
     - parameter fromStopPointId: (path) The originating station&#39;s stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) 
     - parameter id: (path) A single line id e.g. victoria 

     - returns: RequestBuilder<TimetableResponse> 
     */
    open class func lineTimetableWithRequestBuilder(fromStopPointId: String, id: String) -> RequestBuilder<TimetableResponse> {
        var path = "/Line/{id}/Timetable/{fromStopPointId}"
        path = path.replacingOccurrences(of: "{fromStopPointId}", with: fromStopPointId.asParameter, options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{id}", with: id.asParameter, options: .literal, range: nil)
        let URLString = RxTfLAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<TimetableResponse>.Type = RxTfLAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Gets the timetable for a specified station on the give line with specified destination
     
     - parameter fromStopPointId: (path) The originating station&#39;s stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) 
     - parameter id: (path) A single line id e.g. victoria 
     - parameter toStopPointId: (path) The destination stations&#39;s Naptan code 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func lineTimetableTo(fromStopPointId: String, id: String, toStopPointId: String, completion: @escaping ((_ data: TimetableResponse?,_ error: Error?) -> Void)) {
        lineTimetableToWithRequestBuilder(fromStopPointId: fromStopPointId, id: id, toStopPointId: toStopPointId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Gets the timetable for a specified station on the give line with specified destination
     
     - parameter fromStopPointId: (path) The originating station&#39;s stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) 
     - parameter id: (path) A single line id e.g. victoria 
     - parameter toStopPointId: (path) The destination stations&#39;s Naptan code 
     - returns: Observable<TimetableResponse>
     */
    open class func lineTimetableTo(fromStopPointId: String, id: String, toStopPointId: String) -> Observable<TimetableResponse> {
        return Observable.create { observer -> Disposable in
            lineTimetableTo(fromStopPointId: fromStopPointId, id: id, toStopPointId: toStopPointId) { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Gets the timetable for a specified station on the give line with specified destination
     - GET /Line/{id}/Timetable/{fromStopPointId}/to/{toStopPointId}
     - examples: [{contentType=application/json, example={
  "pdfUrl" : "aeiou",
  "disambiguation" : {
    "disambiguationOptions" : [ {
      "description" : "aeiou",
      "uri" : "aeiou"
    } ]
  },
  "lineId" : "aeiou",
  "lineName" : "aeiou",
  "stations" : [ {
    "icsId" : "aeiou",
    "hasDisruption" : true,
    "modes" : [ "aeiou" ],
    "stopType" : "aeiou",
    "lon" : 1.3579000000000001069366817318950779736042022705078125,
    "towards" : "aeiou",
    "parentId" : "aeiou",
    "url" : "aeiou",
    "routeId" : 123,
    "zone" : "aeiou",
    "name" : "aeiou",
    "topMostParentId" : "aeiou",
    "stopLetter" : "aeiou",
    "id" : "aeiou",
    "accessibilitySummary" : "aeiou",
    "lines" : [ {
      "crowding" : {
        "trainLoadings" : [ {
          "naptanTo" : "aeiou",
          "line" : "aeiou",
          "timeSlice" : "aeiou",
          "platformDirection" : "aeiou",
          "value" : 123,
          "lineDirection" : "aeiou",
          "direction" : "aeiou"
        } ],
        "passengerFlows" : [ {
          "timeSlice" : "aeiou",
          "value" : 123
        } ]
      },
      "name" : "aeiou",
      "fullName" : "aeiou",
      "id" : "aeiou",
      "type" : "aeiou",
      "uri" : "aeiou"
    } ],
    "lat" : 1.3579000000000001069366817318950779736042022705078125,
    "stationId" : "aeiou",
    "direction" : "aeiou",
    "status" : true
  } ],
  "stops" : [ "" ],
  "direction" : "aeiou",
  "timetable" : {
    "routes" : [ {
      "stationIntervals" : [ {
        "intervals" : [ {
          "timeToArrival" : 1.3579000000000001069366817318950779736042022705078125,
          "stopId" : "aeiou"
        } ],
        "id" : "aeiou"
      } ],
      "schedules" : [ {
        "name" : "aeiou",
        "lastJourney" : "",
        "periods" : [ {
          "fromTime" : {
            "hour" : "aeiou",
            "minute" : "aeiou"
          },
          "type" : "aeiou",
          "toTime" : "",
          "frequency" : {
            "lowestFrequency" : 1.3579000000000001069366817318950779736042022705078125,
            "highestFrequency" : 1.3579000000000001069366817318950779736042022705078125
          }
        } ],
        "firstJourney" : "",
        "knownJourneys" : [ {
          "hour" : "aeiou",
          "intervalId" : 123,
          "minute" : "aeiou"
        } ]
      } ]
    } ],
    "departureStopId" : "aeiou"
  },
  "statusErrorMessage" : "aeiou"
}}, {contentType=application/xml, example=<null>
  <lineId>aeiou</lineId>
  <lineName>aeiou</lineName>
  <direction>aeiou</direction>
  <pdfUrl>aeiou</pdfUrl>
  <statusErrorMessage>aeiou</statusErrorMessage>
</null>}]
     - examples: [{contentType=application/json, example={
  "pdfUrl" : "aeiou",
  "disambiguation" : {
    "disambiguationOptions" : [ {
      "description" : "aeiou",
      "uri" : "aeiou"
    } ]
  },
  "lineId" : "aeiou",
  "lineName" : "aeiou",
  "stations" : [ {
    "icsId" : "aeiou",
    "hasDisruption" : true,
    "modes" : [ "aeiou" ],
    "stopType" : "aeiou",
    "lon" : 1.3579000000000001069366817318950779736042022705078125,
    "towards" : "aeiou",
    "parentId" : "aeiou",
    "url" : "aeiou",
    "routeId" : 123,
    "zone" : "aeiou",
    "name" : "aeiou",
    "topMostParentId" : "aeiou",
    "stopLetter" : "aeiou",
    "id" : "aeiou",
    "accessibilitySummary" : "aeiou",
    "lines" : [ {
      "crowding" : {
        "trainLoadings" : [ {
          "naptanTo" : "aeiou",
          "line" : "aeiou",
          "timeSlice" : "aeiou",
          "platformDirection" : "aeiou",
          "value" : 123,
          "lineDirection" : "aeiou",
          "direction" : "aeiou"
        } ],
        "passengerFlows" : [ {
          "timeSlice" : "aeiou",
          "value" : 123
        } ]
      },
      "name" : "aeiou",
      "fullName" : "aeiou",
      "id" : "aeiou",
      "type" : "aeiou",
      "uri" : "aeiou"
    } ],
    "lat" : 1.3579000000000001069366817318950779736042022705078125,
    "stationId" : "aeiou",
    "direction" : "aeiou",
    "status" : true
  } ],
  "stops" : [ "" ],
  "direction" : "aeiou",
  "timetable" : {
    "routes" : [ {
      "stationIntervals" : [ {
        "intervals" : [ {
          "timeToArrival" : 1.3579000000000001069366817318950779736042022705078125,
          "stopId" : "aeiou"
        } ],
        "id" : "aeiou"
      } ],
      "schedules" : [ {
        "name" : "aeiou",
        "lastJourney" : "",
        "periods" : [ {
          "fromTime" : {
            "hour" : "aeiou",
            "minute" : "aeiou"
          },
          "type" : "aeiou",
          "toTime" : "",
          "frequency" : {
            "lowestFrequency" : 1.3579000000000001069366817318950779736042022705078125,
            "highestFrequency" : 1.3579000000000001069366817318950779736042022705078125
          }
        } ],
        "firstJourney" : "",
        "knownJourneys" : [ {
          "hour" : "aeiou",
          "intervalId" : 123,
          "minute" : "aeiou"
        } ]
      } ]
    } ],
    "departureStopId" : "aeiou"
  },
  "statusErrorMessage" : "aeiou"
}}, {contentType=application/xml, example=<null>
  <lineId>aeiou</lineId>
  <lineName>aeiou</lineName>
  <direction>aeiou</direction>
  <pdfUrl>aeiou</pdfUrl>
  <statusErrorMessage>aeiou</statusErrorMessage>
</null>}]
     
     - parameter fromStopPointId: (path) The originating station&#39;s stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) 
     - parameter id: (path) A single line id e.g. victoria 
     - parameter toStopPointId: (path) The destination stations&#39;s Naptan code 

     - returns: RequestBuilder<TimetableResponse> 
     */
    open class func lineTimetableToWithRequestBuilder(fromStopPointId: String, id: String, toStopPointId: String) -> RequestBuilder<TimetableResponse> {
        var path = "/Line/{id}/Timetable/{fromStopPointId}/to/{toStopPointId}"
        path = path.replacingOccurrences(of: "{fromStopPointId}", with: fromStopPointId.asParameter, options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{id}", with: id.asParameter, options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{toStopPointId}", with: toStopPointId.asParameter, options: .literal, range: nil)
        let URLString = RxTfLAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<TimetableResponse>.Type = RxTfLAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
