//
// SearchAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import RxSwift



open class SearchAPI: APIBase {
    /**
     Searches the bus schedules folder on S3 for a given bus number.
     
     - parameter query: (query) The search query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func searchBusSchedules(query: String, completion: @escaping ((_ data: SearchResponse?,_ error: Error?) -> Void)) {
        searchBusSchedulesWithRequestBuilder(query: query).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Searches the bus schedules folder on S3 for a given bus number.
     
     - parameter query: (query) The search query 
     - returns: Observable<SearchResponse>
     */
    open class func searchBusSchedules(query: String) -> Observable<SearchResponse> {
        return Observable.create { observer -> Disposable in
            searchBusSchedules(query: query) { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Searches the bus schedules folder on S3 for a given bus number.
     - GET /Search/BusSchedules
     - examples: [{contentType=application/json, example={
  "total" : 123,
  "provider" : "aeiou",
  "query" : "aeiou",
  "pageSize" : 123,
  "from" : 123,
  "page" : 123,
  "maxScore" : 1.3579000000000001069366817318950779736042022705078125,
  "matches" : [ {
    "name" : "aeiou",
    "lon" : 1.3579000000000001069366817318950779736042022705078125,
    "id" : "aeiou",
    "url" : "aeiou",
    "lat" : 1.3579000000000001069366817318950779736042022705078125
  } ]
}}, {contentType=application/xml, example=<null>
  <query>aeiou</query>
  <from>123</from>
  <page>123</page>
  <pageSize>123</pageSize>
  <provider>aeiou</provider>
  <total>123</total>
  <maxScore>3.149</maxScore>
</null>}]
     - examples: [{contentType=application/json, example={
  "total" : 123,
  "provider" : "aeiou",
  "query" : "aeiou",
  "pageSize" : 123,
  "from" : 123,
  "page" : 123,
  "maxScore" : 1.3579000000000001069366817318950779736042022705078125,
  "matches" : [ {
    "name" : "aeiou",
    "lon" : 1.3579000000000001069366817318950779736042022705078125,
    "id" : "aeiou",
    "url" : "aeiou",
    "lat" : 1.3579000000000001069366817318950779736042022705078125
  } ]
}}, {contentType=application/xml, example=<null>
  <query>aeiou</query>
  <from>123</from>
  <page>123</page>
  <pageSize>123</pageSize>
  <provider>aeiou</provider>
  <total>123</total>
  <maxScore>3.149</maxScore>
</null>}]
     
     - parameter query: (query) The search query 

     - returns: RequestBuilder<SearchResponse> 
     */
    open class func searchBusSchedulesWithRequestBuilder(query: String) -> RequestBuilder<SearchResponse> {
        let path = "/Search/BusSchedules"
        let URLString = RxTfLAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "query": query
        ])
        

        let requestBuilder: RequestBuilder<SearchResponse>.Type = RxTfLAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Search the site for occurrences of the query string. The maximum number of results returned is equal to the maximum page size              of 100. To return subsequent pages, use the paginated overload.
     
     - parameter query: (query) The search query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func searchGet(query: String, completion: @escaping ((_ data: SearchResponse?,_ error: Error?) -> Void)) {
        searchGetWithRequestBuilder(query: query).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Search the site for occurrences of the query string. The maximum number of results returned is equal to the maximum page size              of 100. To return subsequent pages, use the paginated overload.
     
     - parameter query: (query) The search query 
     - returns: Observable<SearchResponse>
     */
    open class func searchGet(query: String) -> Observable<SearchResponse> {
        return Observable.create { observer -> Disposable in
            searchGet(query: query) { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Search the site for occurrences of the query string. The maximum number of results returned is equal to the maximum page size              of 100. To return subsequent pages, use the paginated overload.
     - GET /Search
     - examples: [{contentType=application/json, example={
  "total" : 123,
  "provider" : "aeiou",
  "query" : "aeiou",
  "pageSize" : 123,
  "from" : 123,
  "page" : 123,
  "maxScore" : 1.3579000000000001069366817318950779736042022705078125,
  "matches" : [ {
    "name" : "aeiou",
    "lon" : 1.3579000000000001069366817318950779736042022705078125,
    "id" : "aeiou",
    "url" : "aeiou",
    "lat" : 1.3579000000000001069366817318950779736042022705078125
  } ]
}}, {contentType=application/xml, example=<null>
  <query>aeiou</query>
  <from>123</from>
  <page>123</page>
  <pageSize>123</pageSize>
  <provider>aeiou</provider>
  <total>123</total>
  <maxScore>3.149</maxScore>
</null>}]
     - examples: [{contentType=application/json, example={
  "total" : 123,
  "provider" : "aeiou",
  "query" : "aeiou",
  "pageSize" : 123,
  "from" : 123,
  "page" : 123,
  "maxScore" : 1.3579000000000001069366817318950779736042022705078125,
  "matches" : [ {
    "name" : "aeiou",
    "lon" : 1.3579000000000001069366817318950779736042022705078125,
    "id" : "aeiou",
    "url" : "aeiou",
    "lat" : 1.3579000000000001069366817318950779736042022705078125
  } ]
}}, {contentType=application/xml, example=<null>
  <query>aeiou</query>
  <from>123</from>
  <page>123</page>
  <pageSize>123</pageSize>
  <provider>aeiou</provider>
  <total>123</total>
  <maxScore>3.149</maxScore>
</null>}]
     
     - parameter query: (query) The search query 

     - returns: RequestBuilder<SearchResponse> 
     */
    open class func searchGetWithRequestBuilder(query: String) -> RequestBuilder<SearchResponse> {
        let path = "/Search"
        let URLString = RxTfLAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "query": query
        ])
        

        let requestBuilder: RequestBuilder<SearchResponse>.Type = RxTfLAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Gets the available search categories.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func searchMetaCategories(completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        searchMetaCategoriesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Gets the available search categories.
     
     - returns: Observable<[String]>
     */
    open class func searchMetaCategories() -> Observable<[String]> {
        return Observable.create { observer -> Disposable in
            searchMetaCategories() { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Gets the available search categories.
     - GET /Search/Meta/Categories
     - examples: [{contentType=application/json, example=[ "aeiou" ]}, {contentType=application/xml, example=aeiou}]
     - examples: [{contentType=application/json, example=[ "aeiou" ]}, {contentType=application/xml, example=aeiou}]

     - returns: RequestBuilder<[String]> 
     */
    open class func searchMetaCategoriesWithRequestBuilder() -> RequestBuilder<[String]> {
        let path = "/Search/Meta/Categories"
        let URLString = RxTfLAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[String]>.Type = RxTfLAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Gets the available searchProvider names.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func searchMetaSearchProviders(completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        searchMetaSearchProvidersWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Gets the available searchProvider names.
     
     - returns: Observable<[String]>
     */
    open class func searchMetaSearchProviders() -> Observable<[String]> {
        return Observable.create { observer -> Disposable in
            searchMetaSearchProviders() { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Gets the available searchProvider names.
     - GET /Search/Meta/SearchProviders
     - examples: [{contentType=application/json, example=[ "aeiou" ]}, {contentType=application/xml, example=aeiou}]
     - examples: [{contentType=application/json, example=[ "aeiou" ]}, {contentType=application/xml, example=aeiou}]

     - returns: RequestBuilder<[String]> 
     */
    open class func searchMetaSearchProvidersWithRequestBuilder() -> RequestBuilder<[String]> {
        let path = "/Search/Meta/SearchProviders"
        let URLString = RxTfLAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[String]>.Type = RxTfLAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Gets the available sorting options.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func searchMetaSorts(completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        searchMetaSortsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Gets the available sorting options.
     
     - returns: Observable<[String]>
     */
    open class func searchMetaSorts() -> Observable<[String]> {
        return Observable.create { observer -> Disposable in
            searchMetaSorts() { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Gets the available sorting options.
     - GET /Search/Meta/Sorts
     - examples: [{contentType=application/json, example=[ "aeiou" ]}, {contentType=application/xml, example=aeiou}]
     - examples: [{contentType=application/json, example=[ "aeiou" ]}, {contentType=application/xml, example=aeiou}]

     - returns: RequestBuilder<[String]> 
     */
    open class func searchMetaSortsWithRequestBuilder() -> RequestBuilder<[String]> {
        let path = "/Search/Meta/Sorts"
        let URLString = RxTfLAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[String]>.Type = RxTfLAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
