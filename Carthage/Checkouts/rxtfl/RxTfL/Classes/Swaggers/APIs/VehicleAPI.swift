//
// VehicleAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import RxSwift



open class VehicleAPI: APIBase {
    /**
     Gets the predictions for a given list of vehicle Id's.
     
     - parameter ids: (path) A comma-separated list of vehicle ids e.g. LX58CFV,LX11AZB,LX58CFE. Max approx. 25 ids. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func vehicleGet(ids: [String], completion: @escaping ((_ data: [Prediction]?,_ error: Error?) -> Void)) {
        vehicleGetWithRequestBuilder(ids: ids).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Gets the predictions for a given list of vehicle Id's.
     
     - parameter ids: (path) A comma-separated list of vehicle ids e.g. LX58CFV,LX11AZB,LX58CFE. Max approx. 25 ids. 
     - returns: Observable<[Prediction]>
     */
    open class func vehicleGet(ids: [String]) -> Observable<[Prediction]> {
        return Observable.create { observer -> Disposable in
            vehicleGet(ids: ids) { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Gets the predictions for a given list of vehicle Id's.
     - GET /Vehicle/{ids}/Arrivals
     - examples: [{contentType=application/json, example=[ {
  "modeName" : "aeiou",
  "bearing" : "aeiou",
  "timing" : {
    "read" : "2000-01-23T04:56:07.000+00:00",
    "insert" : "2000-01-23T04:56:07.000+00:00",
    "received" : "2000-01-23T04:56:07.000+00:00",
    "source" : "2000-01-23T04:56:07.000+00:00",
    "countdownServerAdjustment" : "aeiou",
    "sent" : "2000-01-23T04:56:07.000+00:00"
  },
  "lineId" : "aeiou",
  "lineName" : "aeiou",
  "destinationNaptanId" : "aeiou",
  "towards" : "aeiou",
  "currentLocation" : "aeiou",
  "timeToLive" : "2000-01-23T04:56:07.000+00:00",
  "expectedArrival" : "2000-01-23T04:56:07.000+00:00",
  "naptanId" : "aeiou",
  "destinationName" : "aeiou",
  "operationType" : 123,
  "stationName" : "aeiou",
  "id" : "aeiou",
  "vehicleId" : "aeiou",
  "platformName" : "aeiou",
  "timeToStation" : 123,
  "direction" : "aeiou",
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
} ]}, {contentType=application/xml, example=<null>
  <id>aeiou</id>
  <operationType>123</operationType>
  <vehicleId>aeiou</vehicleId>
  <naptanId>aeiou</naptanId>
  <stationName>aeiou</stationName>
  <lineId>aeiou</lineId>
  <lineName>aeiou</lineName>
  <platformName>aeiou</platformName>
  <direction>aeiou</direction>
  <bearing>aeiou</bearing>
  <destinationNaptanId>aeiou</destinationNaptanId>
  <destinationName>aeiou</destinationName>
  <timestamp>2000-01-23T04:56:07.000Z</timestamp>
  <timeToStation>123</timeToStation>
  <currentLocation>aeiou</currentLocation>
  <towards>aeiou</towards>
  <expectedArrival>2000-01-23T04:56:07.000Z</expectedArrival>
  <timeToLive>2000-01-23T04:56:07.000Z</timeToLive>
  <modeName>aeiou</modeName>
</null>}]
     - examples: [{contentType=application/json, example=[ {
  "modeName" : "aeiou",
  "bearing" : "aeiou",
  "timing" : {
    "read" : "2000-01-23T04:56:07.000+00:00",
    "insert" : "2000-01-23T04:56:07.000+00:00",
    "received" : "2000-01-23T04:56:07.000+00:00",
    "source" : "2000-01-23T04:56:07.000+00:00",
    "countdownServerAdjustment" : "aeiou",
    "sent" : "2000-01-23T04:56:07.000+00:00"
  },
  "lineId" : "aeiou",
  "lineName" : "aeiou",
  "destinationNaptanId" : "aeiou",
  "towards" : "aeiou",
  "currentLocation" : "aeiou",
  "timeToLive" : "2000-01-23T04:56:07.000+00:00",
  "expectedArrival" : "2000-01-23T04:56:07.000+00:00",
  "naptanId" : "aeiou",
  "destinationName" : "aeiou",
  "operationType" : 123,
  "stationName" : "aeiou",
  "id" : "aeiou",
  "vehicleId" : "aeiou",
  "platformName" : "aeiou",
  "timeToStation" : 123,
  "direction" : "aeiou",
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
} ]}, {contentType=application/xml, example=<null>
  <id>aeiou</id>
  <operationType>123</operationType>
  <vehicleId>aeiou</vehicleId>
  <naptanId>aeiou</naptanId>
  <stationName>aeiou</stationName>
  <lineId>aeiou</lineId>
  <lineName>aeiou</lineName>
  <platformName>aeiou</platformName>
  <direction>aeiou</direction>
  <bearing>aeiou</bearing>
  <destinationNaptanId>aeiou</destinationNaptanId>
  <destinationName>aeiou</destinationName>
  <timestamp>2000-01-23T04:56:07.000Z</timestamp>
  <timeToStation>123</timeToStation>
  <currentLocation>aeiou</currentLocation>
  <towards>aeiou</towards>
  <expectedArrival>2000-01-23T04:56:07.000Z</expectedArrival>
  <timeToLive>2000-01-23T04:56:07.000Z</timeToLive>
  <modeName>aeiou</modeName>
</null>}]
     
     - parameter ids: (path) A comma-separated list of vehicle ids e.g. LX58CFV,LX11AZB,LX58CFE. Max approx. 25 ids. 

     - returns: RequestBuilder<[Prediction]> 
     */
    open class func vehicleGetWithRequestBuilder(ids: [String]) -> RequestBuilder<[Prediction]> {
        var path = "/Vehicle/{ids}/Arrivals"
        path = path.replacingOccurrences(of: "{ids}", with: ids.asParameter, options: .literal, range: nil)
        let URLString = RxTfLAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[Prediction]>.Type = RxTfLAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Gets the Emissions Surcharge compliance for the Vehicle
     
     - parameter vrm: (query) The Vehicle Registration Mark 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func vehicleGetVehicle(vrm: String, completion: @escaping ((_ data: EmissionsSurchargeVehicle?,_ error: Error?) -> Void)) {
        vehicleGetVehicleWithRequestBuilder(vrm: vrm).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Gets the Emissions Surcharge compliance for the Vehicle
     
     - parameter vrm: (query) The Vehicle Registration Mark 
     - returns: Observable<EmissionsSurchargeVehicle>
     */
    open class func vehicleGetVehicle(vrm: String) -> Observable<EmissionsSurchargeVehicle> {
        return Observable.create { observer -> Disposable in
            vehicleGetVehicle(vrm: vrm) { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Gets the Emissions Surcharge compliance for the Vehicle
     - GET /Vehicle/EmissionSurcharge
     - examples: [{contentType=application/json, example={
  "vrm" : "aeiou",
  "colour" : "aeiou",
  "compliance" : "aeiou",
  "model" : "aeiou",
  "type" : "aeiou",
  "make" : "aeiou"
}}, {contentType=application/xml, example=<null>
  <vrm>aeiou</vrm>
  <type>aeiou</type>
  <make>aeiou</make>
  <model>aeiou</model>
  <colour>aeiou</colour>
  <compliance>aeiou</compliance>
</null>}]
     - examples: [{contentType=application/json, example={
  "vrm" : "aeiou",
  "colour" : "aeiou",
  "compliance" : "aeiou",
  "model" : "aeiou",
  "type" : "aeiou",
  "make" : "aeiou"
}}, {contentType=application/xml, example=<null>
  <vrm>aeiou</vrm>
  <type>aeiou</type>
  <make>aeiou</make>
  <model>aeiou</model>
  <colour>aeiou</colour>
  <compliance>aeiou</compliance>
</null>}]
     
     - parameter vrm: (query) The Vehicle Registration Mark 

     - returns: RequestBuilder<EmissionsSurchargeVehicle> 
     */
    open class func vehicleGetVehicleWithRequestBuilder(vrm: String) -> RequestBuilder<EmissionsSurchargeVehicle> {
        let path = "/Vehicle/EmissionSurcharge"
        let URLString = RxTfLAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "vrm": vrm
        ])
        

        let requestBuilder: RequestBuilder<EmissionsSurchargeVehicle>.Type = RxTfLAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
